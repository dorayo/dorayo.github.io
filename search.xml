<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Django Blog - 01. 基本应用搭建</title>
    <url>/2018/08/07/Django-Blog-01-%E5%9F%BA%E6%9C%AC%E5%BA%94%E7%94%A8%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="初始环境搭建"><a href="#初始环境搭建" class="headerlink" title="初始环境搭建"></a>初始环境搭建</h2><h3 id="创建虚拟环境-amp-安装-Django"><a href="#创建虚拟环境-amp-安装-Django" class="headerlink" title="创建虚拟环境 &amp; 安装 Django"></a>创建虚拟环境 &amp; 安装 Django</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir blog</span><br><span class="line">cd blog</span><br><span class="line">python3 -m venv venv</span><br><span class="line">pip install django</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h3 id="创建-Django-Blog-项目"><a href="#创建-Django-Blog-项目" class="headerlink" title="创建 Django Blog 项目"></a>创建 Django Blog 项目</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">django-admin startproject blog_prj .</span><br></pre></td></tr></table></figure>
<h3 id="运行该项目"><a href="#运行该项目" class="headerlink" title="运行该项目"></a>运行该项目</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure>
<p>运行项目后，会在控制台有如下输出内容：<br><img src="/images/pasted-43.png" alt="upload successful"></p>
<p>浏览器打开链接<code>http://127.0.0.1:8000/</code>后，如下图所示：<br><img src="/images/pasted-44.png" alt="upload successful"></p>
<h3 id="创建新的应用-blog"><a href="#创建新的应用-blog" class="headerlink" title="创建新的应用 blog"></a>创建新的应用 <code>blog</code></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python manage.py startapp blog</span><br></pre></td></tr></table></figure>
<h3 id="执行数据库迁移操作"><a href="#执行数据库迁移操作" class="headerlink" title="执行数据库迁移操作"></a>执行数据库迁移操作</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>
<h3 id="修改settings-py文件，增加新的应用blog"><a href="#修改settings-py文件，增加新的应用blog" class="headerlink" title="修改settings.py文件，增加新的应用blog"></a>修改<code>settings.py</code>文件，增加新的应用<code>blog</code></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS &#x3D; [</span><br><span class="line">    &#39;django.contrib.admin&#39;,</span><br><span class="line">    &#39;django.contrib.auth&#39;,</span><br><span class="line">    &#39;django.contrib.contenttypes&#39;,</span><br><span class="line">    &#39;django.contrib.sessions&#39;,</span><br><span class="line">    &#39;django.contrib.messages&#39;,</span><br><span class="line">    &#39;django.contrib.staticfiles&#39;,</span><br><span class="line">    &#39;blog&#39;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="数据库模型"><a href="#数据库模型" class="headerlink" title="数据库模型"></a>数据库模型</h2><p>修改<code>blog/models.py</code>文件，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line">class Post(models.Model):</span><br><span class="line">    title &#x3D; models.CharField(max_length&#x3D;140)</span><br><span class="line">    author &#x3D; models.ForeignKey(</span><br><span class="line">        &#39;auth.User&#39;,</span><br><span class="line">        on_delete&#x3D;models.CASCADE,</span><br><span class="line">    )</span><br><span class="line">    body &#x3D; models.TextField()</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        &quot;&quot;&quot;The representation string of the model&quot;&quot;&quot;</span><br><span class="line">        return self.title</span><br></pre></td></tr></table></figure>
<p>执行数据库迁移：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations blog</span><br><span class="line">python manage.py migrate blog</span><br></pre></td></tr></table></figure>
<h3 id="Django-Admin"><a href="#Django-Admin" class="headerlink" title="Django Admin"></a>Django Admin</h3><p>新建管理员账号：<br><img src="/images/pasted-45.png" alt="upload successful"></p>
<p>执行<code>python manage.py runserver</code>再次运行 Django 服务，并在浏览器中打开<code> http://127.0.0.1:8000/admin/</code>，登入管理员账号后会看到下图：<br><img src="/images/pasted-46.png" alt="upload successful"></p>
<h3 id="添加-Post-模型"><a href="#添加-Post-模型" class="headerlink" title="添加 Post 模型"></a>添加 <code>Post</code> 模型</h3><p>修改<code>blog/admin.py</code>文件，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from .models import Post</span><br><span class="line"></span><br><span class="line">admin.site.register(Post)</span><br></pre></td></tr></table></figure>
<p>刷新网页后，看到更新如下：<br><img src="/images/pasted-47.png" alt="upload successful"></p>
<p>随意增加两条样本数据，刷新页面如下：<br><img src="/images/pasted-48.png" alt="upload successful"></p>
<h2 id="Views"><a href="#Views" class="headerlink" title="Views"></a>Views</h2><p>编辑<code>blog/views.py</code>文件，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.views.generic import ListView</span><br><span class="line">from .models import Post</span><br><span class="line"></span><br><span class="line">class BlogListView(ListView):</span><br><span class="line">    model &#x3D; Post</span><br><span class="line">    template_name &#x3D; &#39;home.html&#39;</span><br></pre></td></tr></table></figure>
<h2 id="Templates"><a href="#Templates" class="headerlink" title="Templates"></a>Templates</h2><p>在项目根目录中创建<code>templates</code>目录，并在该目录中创建<code>base.html</code>和<code>home.html</code>文件：<br><img src="/images/pasted-49.png" alt="upload successful"></p>
<p>更新<code>settings.py</code>文件，让 Django 知道到哪里找<code>templates</code>目录，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TEMPLATES &#x3D; [</span><br><span class="line">    &#123;</span><br><span class="line">		...</span><br><span class="line">        &#39;DIRS&#39;: [os.path.join(BASE_DIR, &#39;templates&#39;)],</span><br><span class="line">		...</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>编辑<code>base.html</code>文件，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;Django blog&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;header&gt;</span><br><span class="line">            &lt;h1&gt;&lt;a href&#x3D;&quot;&#x2F;&quot;&gt;Django blog&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;&#x2F;header&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">            &#123;% block content %&#125;</span><br><span class="line">            &#123;% endblock content %&#125;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>编辑<code>home.html</code>文件，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#39;base.html&#39; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">  &#123;% for post in object_list %&#125;</span><br><span class="line">    &lt;div class&#x3D;&quot;post-entry&quot;&gt;</span><br><span class="line">        &lt;h2&gt;&lt;a href&#x3D;&quot;&quot;&gt;&#123;&#123; post.title &#125;&#125;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; post.body &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line">&#123;% endblock content %&#125;</span><br></pre></td></tr></table></figure>
<h2 id="URLs"><a href="#URLs" class="headerlink" title="URLs"></a>URLs</h2><p>新建<code>blog/urls.py</code>文件，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.urls import path</span><br><span class="line"></span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    path(&#39;&#39;, views.BlogListView.as_view(), name&#x3D;&#39;home&#39;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>更新项目的<code>urls.py</code>文件，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path, include</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    path(&#39;admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">    path(&#39;&#39;, include(&#39;blog.urls&#39;)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>再次运行程序，刷新页面<code>http://127.0.0.1:8000/ </code>，显示如下：</p>
<p><img src="/images/pasted-53.png" alt="upload successful"></p>
<h2 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h2><p>在项目根目录中创建<code>static</code>目录：<br><img src="/images/pasted-50.png" alt="upload successful"></p>
<p>更新<code>settings.py</code>文件，让 Django 知道到哪里找<code>static</code>目录，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">STATICFILES_DIRS &#x3D; [os.path.join(BASE_DIR, &#39;static&#39;)]</span><br></pre></td></tr></table></figure>
<p>在<code>static</code>目录中创建<code>css</code>目录，并在<code>css</code>目录中创建<code>base.css</code>文件：</p>
<p><img src="/images/pasted-51.png" alt="upload successful"></p>
<p>编辑<code>base.css</code>文件，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">header h1 a &#123;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后，在<code>base.html</code>模板文件的最上方增加的那行 <code>load static</code> 代码的作用是可以让模板关联到静态文件的目录。另外，通过<code>&lt;link&gt;</code>标签来明确地引入<code>base.css</code>文件，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% load static %&#125;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;Django blog&lt;&#x2F;title&gt;</span><br><span class="line">        &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;&#123;% static &#39;css&#x2F;base.css&#39; %&#125;&quot;&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;header&gt;</span><br><span class="line">            &lt;h1&gt;&lt;a href&#x3D;&quot;&#x2F;&quot;&gt;Django blog&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;&#x2F;header&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">            &#123;% block content %&#125;</span><br><span class="line">            &#123;% endblock content %&#125;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>再次运行程序，刷新页面<code>http://127.0.0.1:8000/ </code>，样式已经生效，如下所示：</p>
<p><img src="/images/pasted-52.png" alt="upload successful"></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Blog - 02. 详情页及测试</title>
    <url>/2018/08/07/Django-Blog-02-%E8%AF%A6%E6%83%85%E9%A1%B5%E5%8F%8A%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h2 id="Views"><a href="#Views" class="headerlink" title="Views"></a>Views</h2><p>在<code>blog/views.py</code>文件中增加新的视图类<code>BlogDetailView</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.views.generic import ListView, DetailView</span><br><span class="line">from . models import Post</span><br><span class="line"></span><br><span class="line">class BlogListView(ListView):</span><br><span class="line">    model &#x3D; Post</span><br><span class="line">    template_name &#x3D; &#39;home.html&#39;</span><br><span class="line"></span><br><span class="line">class BlogDetailView(DetailView):</span><br><span class="line">    model &#x3D; Post</span><br><span class="line">    template_name &#x3D; &#39;post_detail.html&#39;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>默认情况下，DetailView 会提供一个上下文对象<code>object</code>或小写的模型（model）名字<code>post</code>用在模板文件中<br>DetailView 需要一个主键或slug作为标识符。后面详述…</p>
</blockquote>
<a id="more"></a>

<h2 id="Templates"><a href="#Templates" class="headerlink" title="Templates"></a>Templates</h2><p>新建<code>templates/post_detail.html</code>文件，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#39;base.html&#39; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">  &lt;div class&#x3D;&quot;post-entry&quot;&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; post.title &#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; post.body &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&#123;% endblock content %&#125;</span><br></pre></td></tr></table></figure>
<h2 id="URLs"><a href="#URLs" class="headerlink" title="URLs"></a>URLs</h2><p>修改<code>blog/urls.py</code>文件，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.urls import path</span><br><span class="line"></span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    path(&#39;&#39;, views.BlogListView.as_view(), name&#x3D;&#39;home&#39;),</span><br><span class="line">    path(&#39;post&#x2F;&lt;int:pk&gt;&#x2F;&#39;, views.BlogDetailView.as_view(), name&#x3D;&#39;post_detail&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>再次运行程序，访问页面<code>http://127.0.0.1:8000/post/1/ </code>，显示如下：</p>
<p><img src="/images/pasted-54.png" alt="upload successful"></p>
<p>更新<code>templates/home.html</code>文件，添加页面链接，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#39;base.html&#39; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">  &#123;% for post in object_list %&#125;</span><br><span class="line">    &lt;div class&#x3D;&quot;post-entry&quot;&gt;</span><br><span class="line">        &lt;h2&gt;&lt;a href&#x3D;&quot;&#123;% url &#39;post_detail&#39; post.pk %&#125;&quot;&gt;&#123;&#123; post.title &#125;&#125;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; post.body &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line">&#123;% endblock content %&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Tests"><a href="#Tests" class="headerlink" title="Tests"></a>Tests</h2><p>增加针对模型和视图的测试代码，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.test import TestCase, Client</span><br><span class="line">from django.contrib.auth import get_user_model</span><br><span class="line">from django.urls import reverse</span><br><span class="line"></span><br><span class="line">from .models import Post</span><br><span class="line"></span><br><span class="line">class BlogTests(TestCase):</span><br><span class="line">    def setUp(self):</span><br><span class="line">        self.user &#x3D; get_user_model().objects.create_user(</span><br><span class="line">            username &#x3D; &#39;testuser&#39;,</span><br><span class="line">            email &#x3D; &#39;test@email.com&#39;,</span><br><span class="line">            password &#x3D; &#39;secret&#39;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        self.post &#x3D; Post.objects.create(</span><br><span class="line">            title &#x3D; &#39;A good title&#39;,</span><br><span class="line">            body &#x3D; &#39;Nice body content&#39;,</span><br><span class="line">            author &#x3D; self.user,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    def test_string_representation(self):</span><br><span class="line">        post &#x3D; Post(title&#x3D;&#39;A sample title&#39;)</span><br><span class="line">        self.assertEqual(str(post), post.title)</span><br><span class="line"></span><br><span class="line">    def test_post_content(self):</span><br><span class="line">        self.assertEqual(f&#39;&#123;self.post.title&#125;&#39;, &#39;A good title&#39;)</span><br><span class="line">        self.assertEqual(f&#39;&#123;self.post.author&#125;&#39;, &#39;testuser&#39;)</span><br><span class="line">        self.assertEqual(f&#39;&#123;self.post.body&#125;&#39;, &#39;Nice body content&#39;)</span><br><span class="line"></span><br><span class="line">    def test_post_list_view(self):</span><br><span class="line">        response &#x3D; self.client.get(reverse(&#39;home&#39;))</span><br><span class="line">        self.assertEqual(response.status_code, 200)</span><br><span class="line">        self.assertContains(response, &#39;Nice body content&#39;)</span><br><span class="line">        self.assertTemplateUsed(response, &#39;home.html&#39;)</span><br><span class="line"></span><br><span class="line">    def test_post_detail_view(self):</span><br><span class="line">        response &#x3D; self.client.get(&#39;&#x2F;post&#x2F;1&#x2F;&#39;)</span><br><span class="line">        no_response &#x3D; self.client.get(&#39;&#x2F;post&#x2F;1000&#x2F;&#39;)</span><br><span class="line">        self.assertEqual(response.status_code, 200)</span><br><span class="line">        self.assertEqual(no_response.status_code, 404)</span><br><span class="line">        self.assertContains(response, &#39;A good title&#39;)</span><br><span class="line">        self.assertTemplateUsed(response, &#39;post_detail.html&#39;)</span><br></pre></td></tr></table></figure>
<p>执行如下命令，运行测试用例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python manage.py test</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Blog - 03. 表单</title>
    <url>/2018/08/07/Django-Blog-03-%E8%A1%A8%E5%8D%95/</url>
    <content><![CDATA[<h2 id="新建博客"><a href="#新建博客" class="headerlink" title="新建博客"></a>新建博客</h2><h3 id="导航栏增加新建博客的链接"><a href="#导航栏增加新建博客的链接" class="headerlink" title="导航栏增加新建博客的链接"></a>导航栏增加新建博客的链接</h3><p>修改<code>templates/base.html</code>文件，代码如下：</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% load static %&#125;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;Django blog&lt;&#x2F;title&gt;</span><br><span class="line">        &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;&#123;% static &#39;css&#x2F;base.css&#39; %&#125;&quot;&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">            &lt;header&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;nav-left&quot;&gt;</span><br><span class="line">                    &lt;h1&gt;&lt;a href&#x3D;&quot;&#x2F;&quot;&gt;Django blog&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;nav-right&quot;&gt;</span><br><span class="line">                    &lt;h1&gt;&lt;a href&#x3D;&quot;&#123;% url &#39;post_new&#39; %&#125;&quot;&gt;+ New Blog Post&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;header&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">            &#123;% block content %&#125;</span><br><span class="line">            &#123;% endblock content %&#125;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<h3 id="更新路由"><a href="#更新路由" class="headerlink" title="更新路由"></a>更新路由</h3><p>修改<code>blog/urls.py</code>文件，添加新的 URL 配置，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.urls import path</span><br><span class="line"></span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    path(&#39;&#39;, views.BlogListView.as_view(), name&#x3D;&#39;home&#39;),</span><br><span class="line">    path(&#39;post&#x2F;&lt;int:pk&gt;&#x2F;&#39;, views.BlogDetailView.as_view(), name&#x3D;&#39;post_detail&#39;),</span><br><span class="line">    path(&#39;post&#x2F;new&#x2F;&#39;, views.BlogCreateView.as_view(), name&#x3D;&#39;post_new&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="新建视图类"><a href="#新建视图类" class="headerlink" title="新建视图类"></a>新建视图类</h3><p>修改<code>blog/views.py</code>文件，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.views.generic import ListView, DetailView</span><br><span class="line">from django.views.generic.edit import CreateView</span><br><span class="line">from .models import Post</span><br><span class="line"></span><br><span class="line">class BlogListView(ListView):</span><br><span class="line">    model &#x3D; Post</span><br><span class="line">    template_name &#x3D; &#39;home.html&#39;</span><br><span class="line"></span><br><span class="line">class BlogDetailView(DetailView):</span><br><span class="line">    model &#x3D; Post</span><br><span class="line">    template_name &#x3D; &#39;post_detail.html&#39;</span><br><span class="line"></span><br><span class="line">class BlogCreateView(CreateView):</span><br><span class="line">    model &#x3D; Post</span><br><span class="line">    template_name &#x3D; &#39;post_new.html&#39;</span><br><span class="line">    fields &#x3D; &#39;__all__&#39;</span><br></pre></td></tr></table></figure>
<h3 id="新建模板文件"><a href="#新建模板文件" class="headerlink" title="新建模板文件"></a>新建模板文件</h3><p>新建<code>templates/post_new.html</code>文件，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#39;base.html&#39; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    &lt;h1&gt;New post&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;post&quot;&gt;&#123;% csrf_token %&#125;</span><br><span class="line">        &#123;&#123; form.as_p &#125;&#125;</span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Save&quot;&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>
<h3 id="get-absolute-url"><a href="#get-absolute-url" class="headerlink" title="get_absolute_url"></a>get_absolute_url</h3><p>在提交表单之后，Django 需要知道页面要跳转到哪里，为此，可以通过在模型类中提供<code>get_absolute_url</code>方法实现，修改<code>blog/models.py</code>文件，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line">from django.urls import reverse</span><br><span class="line"></span><br><span class="line">class Post(models.Model):</span><br><span class="line">    title &#x3D; models.CharField(max_length&#x3D;140)</span><br><span class="line">    author &#x3D; models.ForeignKey(</span><br><span class="line">        &#39;auth.User&#39;,</span><br><span class="line">        on_delete&#x3D;models.CASCADE,</span><br><span class="line">    )</span><br><span class="line">    body &#x3D; models.TextField()</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        &quot;&quot;&quot;The representation string of the model&quot;&quot;&quot;</span><br><span class="line">        return self.title</span><br><span class="line"></span><br><span class="line">    def get_absolute_url(self):</span><br><span class="line">        return reverse(&#39;post_detail&#39;, args&#x3D;[str(self.id)])</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>reverse</code>是 Django 提供的一个方便的函数，只需要通过传入需要重定向的 URL 模板的名字，和所需的参数。</p>
</blockquote>
<h2 id="更新博客"><a href="#更新博客" class="headerlink" title="更新博客"></a>更新博客</h2><h3 id="添加更新链接"><a href="#添加更新链接" class="headerlink" title="添加更新链接"></a>添加更新链接</h3><p>修改<code>templates/post_detail.html</code>文件，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#39;base.html&#39; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">  &lt;div class&#x3D;&quot;post-entry&quot;&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; post.title &#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; post.body &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;a href&#x3D;&quot;url &#39;post_edit&#39; post.pk&quot;&gt;+Edit Blog Post&lt;&#x2F;a&gt;</span><br><span class="line">&#123;% endblock content %&#125;</span><br></pre></td></tr></table></figure>
<h3 id="新建模板文件-1"><a href="#新建模板文件-1" class="headerlink" title="新建模板文件"></a>新建模板文件</h3><p>接着，创建<code>templates/post_edit.html</code>文件，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#39;base.html&#39; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    &lt;h1&gt;Edit post&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;post&quot;&gt;&#123;% csrf_token %&#125;</span><br><span class="line">        &#123;&#123; form.as_p &#125;&#125;</span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Update&quot;&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>
<h3 id="新建视图类-1"><a href="#新建视图类-1" class="headerlink" title="新建视图类"></a>新建视图类</h3><p>修改<code>blog/views.py</code>文件，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.views.generic import ListView, DetailView</span><br><span class="line">from django.views.generic.edit import CreateView, UpdateView</span><br><span class="line">from .models import Post</span><br><span class="line"></span><br><span class="line">class BlogListView(ListView):</span><br><span class="line">    model &#x3D; Post</span><br><span class="line">    template_name &#x3D; &#39;home.html&#39;</span><br><span class="line"></span><br><span class="line">class BlogDetailView(DetailView):</span><br><span class="line">    model &#x3D; Post</span><br><span class="line">    template_name &#x3D; &#39;post_detail.html&#39;</span><br><span class="line"></span><br><span class="line">class BlogCreateView(CreateView):</span><br><span class="line">    model &#x3D; Post</span><br><span class="line">    template_name &#x3D; &#39;post_new.html&#39;</span><br><span class="line">    fields &#x3D; &#39;__all__&#39;</span><br><span class="line"></span><br><span class="line">class BlogUpdateView(UpdateView):</span><br><span class="line">    model &#x3D; Post</span><br><span class="line">    template_name &#x3D; &#39;post_edit.html&#39;</span><br><span class="line">    fields &#x3D; [&#39;title&#39;, &#39;body&#39;]</span><br></pre></td></tr></table></figure>
<h3 id="更新路由-1"><a href="#更新路由-1" class="headerlink" title="更新路由"></a>更新路由</h3><p>修改<code>blog/urls.py</code>文件，添加新的 URL 配置，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.urls import path</span><br><span class="line"></span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    path(&#39;&#39;, views.BlogListView.as_view(), name&#x3D;&#39;home&#39;),</span><br><span class="line">    path(&#39;post&#x2F;&lt;int:pk&gt;&#x2F;&#39;, views.BlogDetailView.as_view(), name&#x3D;&#39;post_detail&#39;),</span><br><span class="line">    path(&#39;post&#x2F;new&#x2F;&#39;, views.BlogCreateView.as_view(), name&#x3D;&#39;post_new&#39;),</span><br><span class="line">    path(&#39;post&#x2F;&lt;int:pk&gt;&#x2F;edit&#x2F;&#39;, views.BlogUpdateView.as_view(), name&#x3D;&#39;post_edit&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="删除博客"><a href="#删除博客" class="headerlink" title="删除博客"></a>删除博客</h2><h3 id="添加删除链接"><a href="#添加删除链接" class="headerlink" title="添加删除链接"></a>添加删除链接</h3><p>修改<code>templates/post_detail.html</code>文件，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#39;base.html&#39; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">  &lt;div class&#x3D;&quot;post-entry&quot;&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; post.title &#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; post.body &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;p&gt;&lt;a href&#x3D;&quot;&#123;% url &#39;post_edit&#39; post.pk %&#125;&quot;&gt;+Edit Blog Post&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;p&gt;&lt;a href&#x3D;&quot;&#123;% url &#39;post_delete&#39; post.pk %&#125;&quot;&gt;+Delete Blog Post&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&#123;% endblock content %&#125;</span><br></pre></td></tr></table></figure>
<h3 id="新建模板文件-2"><a href="#新建模板文件-2" class="headerlink" title="新建模板文件"></a>新建模板文件</h3><p>接着，创建<code>templates/post_delete.html</code>文件，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#39;base.html&#39; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">    &lt;h1&gt;Delete post&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;post&quot;&gt;&#123;% csrf_token %&#125;</span><br><span class="line">        &lt;p&gt;Are you sure you want to delete &quot;&#123;&#123; post.title &#125;&#125;&quot;?&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Confirm&quot;&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>
<h3 id="新建视图类-2"><a href="#新建视图类-2" class="headerlink" title="新建视图类"></a>新建视图类</h3><p>修改<code>blog/views.py</code>文件，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.views.generic import ListView, DetailView</span><br><span class="line">from django.views.generic.edit import CreateView, UpdateView, DeleteView</span><br><span class="line">from django.urls import reverse_lazy</span><br><span class="line">from .models import Post</span><br><span class="line"></span><br><span class="line">class BlogListView(ListView):</span><br><span class="line">    model &#x3D; Post</span><br><span class="line">    template_name &#x3D; &#39;home.html&#39;</span><br><span class="line"></span><br><span class="line">class BlogDetailView(DetailView):</span><br><span class="line">    model &#x3D; Post</span><br><span class="line">    template_name &#x3D; &#39;post_detail.html&#39;</span><br><span class="line"></span><br><span class="line">class BlogCreateView(CreateView):</span><br><span class="line">    model &#x3D; Post</span><br><span class="line">    template_name &#x3D; &#39;post_new.html&#39;</span><br><span class="line">    fields &#x3D; &#39;__all__&#39;</span><br><span class="line"></span><br><span class="line">class BlogUpdateView(UpdateView):</span><br><span class="line">    model &#x3D; Post</span><br><span class="line">    template_name &#x3D; &#39;post_edit.html&#39;</span><br><span class="line">    fields &#x3D; [&#39;title&#39;, &#39;body&#39;]</span><br><span class="line"></span><br><span class="line">class BlogDeleteView(DeleteView):</span><br><span class="line">    model &#x3D; Post</span><br><span class="line">    template_name &#x3D; &#39;post_delete.html&#39;</span><br><span class="line">    # use reverse_lazy, it won&#39;t execute the </span><br><span class="line">    # URL redirect until the delete op finished</span><br><span class="line">    success_url &#x3D; reverse_lazy(&#39;home&#39;)</span><br></pre></td></tr></table></figure>

<h3 id="更新路由-2"><a href="#更新路由-2" class="headerlink" title="更新路由"></a>更新路由</h3><p>修改<code>blog/urls.py</code>文件，添加新的 URL 配置，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.urls import path</span><br><span class="line"></span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    path(&#39;&#39;, views.BlogListView.as_view(), name&#x3D;&#39;home&#39;),</span><br><span class="line">    path(&#39;post&#x2F;&lt;int:pk&gt;&#x2F;&#39;, views.BlogDetailView.as_view(), name&#x3D;&#39;post_detail&#39;),</span><br><span class="line">    path(&#39;post&#x2F;new&#x2F;&#39;, views.BlogCreateView.as_view(), name&#x3D;&#39;post_new&#39;),</span><br><span class="line">    path(&#39;post&#x2F;&lt;int:pk&gt;&#x2F;edit&#x2F;&#39;, views.BlogUpdateView.as_view(), name&#x3D;&#39;post_edit&#39;),</span><br><span class="line">    path(&#39;post&#x2F;&lt;int:pk&gt;&#x2F;delete&#x2F;&#39;, views.BlogDeleteView.as_view(), name&#x3D;&#39;post_delete&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Blog - 04. 用户账户</title>
    <url>/2018/08/13/Django-Blog-04-%E7%94%A8%E6%88%B7%E8%B4%A6%E6%88%B7/</url>
    <content><![CDATA[<p>Django提供了一个强大的内置用户认证系统，其中的用户对象，包含如下信息：</p>
<ul>
<li>username</li>
<li>password</li>
<li>email</li>
<li>first_name</li>
<li>last_name<br>通过使用该用户对象，我们就可以实现登录(login)、注销(logout)和注册(signup)功能。<a id="more"></a>

</li>
</ul>
<h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>Django 提供了一个默认的用作登录页的 LoginView，实现登录功能，我们需要做的只有三件事：</p>
<ol>
<li>在项目的 urls.py 文件中增加一条认证系统的路由</li>
<li>提供一个登录模板文件</li>
<li>更新 项目的 settings.py 文件，配置 LOGIN_REDIRECT_URL 值</li>
</ol>
<p>首先，更新 blog_prj/urls.py 文件，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path, include</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    path(&#39;admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">    path(&#39;accounts&#x2F;&#39;, include(&#39;django.contrib.auth.urls&#39;)),</span><br><span class="line">    path(&#39;&#39;, include(&#39;blog.urls&#39;)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>接着，正如 LoginView 的文档中描述，默认情况下 Django 会在 <code>templates</code> 目录下查找名为 <code>registration</code> 的目录，并在该目录中查找<code>login.html</code>文件作为登录表单。创建 <code>templates/registration/login.html</code>，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#39;base.html&#39; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">&lt;h2&gt;Login&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;post&quot;&gt;&#123;% csrf_token %&#125;</span><br><span class="line">    &#123;% form.as_p %&#125;</span><br><span class="line">    &lt;button type&#x3D;&quot;submit&quot;&gt;Login&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&#123;% endblock content %&#125;</span><br></pre></td></tr></table></figure>
<p>最后，修改 <code>blog_prj/settings.py</code>文件，指定登录成功后的重定向 URL，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LOGIN_REDIRECT_URL &#x3D; &#39;home&#39;</span><br></pre></td></tr></table></figure>
<p>重启服务后访问<code>http://127.0.0.1:8000/accounts/login/</code>页面，会看到如下登录页面：<br><img src="/images/pasted-55.png" alt="upload successful"></p>
<h3 id="is-authenticated-属性"><a href="#is-authenticated-属性" class="headerlink" title="is_authenticated 属性"></a><code>is_authenticated</code> 属性</h3><p>通过<code>is_authenticated</code>属性可以判断用户是否已经登录，修改<code>templates/base.html</code>文件，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;&#x2F;header&gt;</span><br><span class="line">&#123;% if user.is_authenticated %&#125;</span><br><span class="line">    &lt;p&gt;Hi &#123;&#123; user.username &#125;&#125;!&lt;&#x2F;p&gt;</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    &lt;p&gt;You are not logged in.&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;&#123;% url &#39;login&#39; %&#125;&quot;&gt;login&lt;&#x2F;a&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h2 id="注销"><a href="#注销" class="headerlink" title="注销"></a>注销</h2><p>修改<code>base.html</code>文件，增加登录的链接，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&#123;% if user.is_authenticated %&#125;</span><br><span class="line">	&lt;p&gt;Hi &#123;&#123; user.username &#125;&#125;!&lt;&#x2F;p&gt;</span><br><span class="line">	&lt;p&gt;&lt;a href&#x3D;&quot;&#123;% url &#39;logout&#39; %&#125;&quot;&gt;logout&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>更新<code>blog_prj/settings.py</code>文件，增加注销之后的重定向 URL：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LOGIN_REDIRECT_URL &#x3D; &#39;home&#39;</span><br><span class="line">LOGOUT_REDIRECT_URL &#x3D; &#39;home&#39;</span><br></pre></td></tr></table></figure>
<h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><p>为设计鲁棒性好的认证系统，我们可以在 Django 提供的 <code>UserCreationForm</code>基础上，创建新的 app <code>accounts</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(venv) ➜  blog git:(master) ✗ python manage.py startapp accounts</span><br></pre></td></tr></table></figure>
<h3 id="blog-prj-settings-py"><a href="#blog-prj-settings-py" class="headerlink" title="blog_prj/settings.py"></a><code>blog_prj/settings.py</code></h3><p>修改 <code>blog_prj/settings.py</code>文件，在<code>INSTALLED_APPS</code>增加新的 app：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS &#x3D; [</span><br><span class="line">    &#39;django.contrib.admin&#39;,</span><br><span class="line">    &#39;django.contrib.auth&#39;,</span><br><span class="line">    &#39;django.contrib.contenttypes&#39;,</span><br><span class="line">    &#39;django.contrib.sessions&#39;,</span><br><span class="line">    &#39;django.contrib.messages&#39;,</span><br><span class="line">    &#39;django.contrib.staticfiles&#39;,</span><br><span class="line">    &#39;blog&#39;,</span><br><span class="line">    &#39;accounts&#39;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="blog-prj-urls-py"><a href="#blog-prj-urls-py" class="headerlink" title="blog_prj/urls.py"></a><code>blog_prj/urls.py</code></h3><p>接下来，更新<code>blog_prj/urls.py</code>，增加新的 url 配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from django.urls import path, include</span><br><span class="line"></span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    path(&#39;admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">    path(&#39;accounts&#x2F;&#39;, include(&#39;django.contrib.auth.urls&#39;)),</span><br><span class="line">    path(&#39;accounts&#x2F;&#39;, include(&#39;accounts.urls&#39;)),</span><br><span class="line">    path(&#39;&#39;, include(&#39;blog.urls&#39;)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="urls-py"><a href="#urls-py" class="headerlink" title="urls.py"></a><code>urls.py</code></h3><p>创建 <code>accounts/urls.py</code>文件，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.urls import path</span><br><span class="line">from . import views</span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    path(&#39;signup&#x2F;&#39;, views.SignUpView.as_view(), name&#x3D;&#39;signup&#39;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="views"><a href="#views" class="headerlink" title="views"></a><code>views</code></h3><p>创建<code>accounts/views.py</code>，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.contrib.auth.forms import UserCreationForm </span><br><span class="line">from django.urls import reverse_lazy</span><br><span class="line">from django.views import generic</span><br><span class="line"></span><br><span class="line">class SignUpView(generic.CreateView): </span><br><span class="line">    form_class &#x3D; UserCreationForm </span><br><span class="line">    success_url &#x3D; reverse_lazy(&#39;login&#39;) </span><br><span class="line">    template_name &#x3D; &#39;signup.html&#39;</span><br></pre></td></tr></table></figure>
<h3 id="signup-html"><a href="#signup-html" class="headerlink" title="signup.html"></a><code>signup.html</code></h3><p>创建<code>templates/signup.html</code>文件，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#39;base.html&#39; %&#125;</span><br><span class="line">&#123;% block content %&#125; </span><br><span class="line">    &lt;h2&gt;Sign up&lt;&#x2F;h2&gt; </span><br><span class="line">    &lt;form method&#x3D;&quot;post&quot;&gt;&#123;% csrf_token %&#125;</span><br><span class="line">        &#123;&#123; form.as_p &#125;&#125;</span><br><span class="line">        &lt;button type&#x3D;&quot;submit&quot;&gt;Sign up&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>
<p>运行服务之后，如下图所示：<br><img src="/images/pasted-56.png" alt="upload successful"></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask-Vue-Crud - 01. 项目介绍及搭建</title>
    <url>/2018/07/22/Flask-Vue-Crud-01-%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D%E5%8F%8A%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="主要依赖"><a href="#主要依赖" class="headerlink" title="主要依赖"></a>主要依赖</h2><ul>
<li>Vue v2.5.2</li>
<li>Vue CLI v2.9.3</li>
<li>Node v10.3.0</li>
<li>npm v6.1.0</li>
<li>Flask v1.0.2</li>
<li>Python v3.6.5</li>
</ul>
<h2 id="教学目标"><a href="#教学目标" class="headerlink" title="教学目标"></a>教学目标</h2><p>课程结束后，你应该可以：</p>
<a id="more"></a>
<ol>
<li>解释什么是 Flask</li>
<li>解释什么是 Vue，并且清楚 Vue 同其他前端框架 ，如 Angular、React 的区别</li>
<li>通过脚手架（Vue CLI）来快速创建前端项目</li>
<li>通过 Vue 组件创建单页面应用</li>
<li>通过异步请求将 Vue 前端应用和 Flask 后端应用连通</li>
<li>通过 Flask 开发 RESTful API</li>
<li>通过 Bootstrap 来美化 Vue 组件</li>
<li>通过 Vue 路由来创建路由并渲染组件</li>
</ol>
<h2 id="什么是-Flask？"><a href="#什么是-Flask？" class="headerlink" title="什么是 Flask？"></a>什么是 Flask？</h2><p>Flask 是一个简单却很强大的 web 微框架，可以非常完美的来构建 RESTFul API。就像 Ruby 的 Sinatra 和 Node 的 Express，它非常小和灵活，根据需要，你可以从一个很小的应用开始，逐步添加功能到一个复杂的应用。</p>
<p>初次接触 Flask，可以从下面两个教程开始：</p>
<ol>
<li><a href="https://github.com/mjhea0/flaskr-tdd">Flaskr TDD</a></li>
<li><a href="http://mherman.org/blog/2017/04/26/flask-for-node-developers/">Flask for Node Developers</a></li>
</ol>
<h2 id="什么是-Vue？"><a href="#什么是-Vue？" class="headerlink" title="什么是 Vue？"></a>什么是 Vue？</h2><p>Vue 是一个开源的 Javascript 框架，用来编写用户界面。它借鉴了 React 和 Angular 的一些优秀概念。</p>
<p>以下两篇文章，比较了 Vue 跟 Angular 和 React 的一些比较：</p>
<ol>
<li><a href="https://vuejs.org/v2/guide/comparison.html">Vue: Comparison with Other Frameworks</a></li>
<li><a href="https://medium.com/unicorn-supplies/angular-vs-react-vs-vue-a-2017-comparison-c5c52d620176">Angular vs. React vs. Vue: A 2017 comparison</a></li>
</ol>
<h2 id="Flask-Setup"><a href="#Flask-Setup" class="headerlink" title="Flask Setup"></a>Flask Setup</h2><p>执行如下命令，创建项目目录，并启用虚拟环境<br><img src="/images/pasted-29.png" alt="upload successful"></p>
<p>安装 Flask 和 Flask-CORS 扩展<br><img src="/images/pasted-30.png" alt="upload successful"></p>
<p>在项目根目录下，创建 <code>app.py</code>文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from flask import Flask, jsonify</span><br><span class="line">from flask_cors import CORS</span><br><span class="line"></span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line"></span><br><span class="line">CORS(app)</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;ping&#39;, methods&#x3D;[&#39;GET&#39;])</span><br><span class="line">def ping_pong():</span><br><span class="line">    return jsonify(&#39;Pong!&#39;)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>
<p>执行如下命令，运行 app：<br><img src="/images/pasted-31.png" alt="upload successful"></p>
<p>打开浏览器，键入<code>http://localhost:5000/ping</code>，会看到如下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;Pong!&quot;</span><br></pre></td></tr></table></figure>
<p>为什么需要 Flask-CORS？</p>
<blockquote>
<p>如果使用不同的协议，或者请求来自于其他的 IP 地址或域名或端口，就需要用到 Cross Origin Resource Sharing （CORS），这正是 Flask-CORS 扩展帮我们做到的。当然，实际产品环境中，我们应该配置只允许来自前端应用所在的域来请求。</p>
</blockquote>
<h2 id="Vue-Setup"><a href="#Vue-Setup" class="headerlink" title="Vue Setup"></a>Vue Setup</h2><p>全局安装 Vue CLI ：<br><img src="/images/pasted-32.png" alt="upload successful"></p>
<p>接着，执行如下命令，通过 <code>webpack</code>来初始化一个新的 Vue 项目 <code>client</code>：<br><img src="/images/pasted-33.png" alt="upload successful"></p>
<p>我们主要要写的代码都在 <code>src</code>目录里，目录结构如下所示：<br><img src="/images/pasted-34.png" alt="upload successful"></p>
<p>解释如下：</p>
<table>
<thead>
<tr>
<th align="left">名字</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">main.js</td>
<td align="left">app 的入口，它会加载和初始化 Vue 和根组件</td>
</tr>
<tr>
<td align="left">App.vue</td>
<td align="left">根组件 - 其他组件的入口</td>
</tr>
<tr>
<td align="left"><code>assets</code></td>
<td align="left">静态文件如图片和字体等都放在这里</td>
</tr>
<tr>
<td align="left"><code>components</code></td>
<td align="left">UI 组件放在这里</td>
</tr>
<tr>
<td align="left"><code>router</code></td>
<td align="left">URL 同组件的映射关系在这里定义</td>
</tr>
</tbody></table>
<p><code>client/src/components/HelloWord.vue</code>是自动生成的<a href="https://vuejs.org/v2/guide/single-file-components.html">单文件</a>组件，有三部分组成：</p>
<ol>
<li>template: 组件的 HTML 内容</li>
<li>script: 组件的逻辑代码（Javascript）</li>
<li>style: 组件的样式（CSS）</li>
</ol>
<p>执行如下命令，运行前端程序：<br><img src="/images/pasted-35.png" alt="upload successful"></p>
<p>访问 <code>http://localhost:8080</code> 能看到前端页面</p>
<h3 id="添加新组件"><a href="#添加新组件" class="headerlink" title="添加新组件"></a>添加新组件</h3><p>创建<code>client/src/components/Ping.vue</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;Ping&#39;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &#39;Hello!&#39;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>更新<code>client/src/router/index.js</code>，映射<code>/ping</code>到<code>Ping</code>组件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;;</span><br><span class="line">import Router from &#39;vue-router&#39;;</span><br><span class="line">import HelloWorld from &#39;@&#x2F;components&#x2F;HelloWorld&#39;;</span><br><span class="line">import Ping from &#39;@&#x2F;components&#x2F;Ping&#39;;</span><br><span class="line"></span><br><span class="line">Vue.use(Router);</span><br><span class="line"></span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#39;&#x2F;&#39;,</span><br><span class="line">      name: &#39;HelloWorld&#39;,</span><br><span class="line">      component: HelloWorld,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#39;&#x2F;ping&#39;,</span><br><span class="line">      name: &#39;Ping&#39;,</span><br><span class="line">      component: Ping,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  mode: &#39;history&#39;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面的<code>mode: &#39;history&#39;</code>是为了让 URL 变成<code>http://localhost：8080/ping</code>的形式。如果，不加该设置，默认的 URL 为<code>http://localhost:8080/#/ping</code>的形式。</p>
</blockquote>
<p>最后，修改<code>client/src/App.vue</code>，移除模板里自带的图片：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view&#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>
<p>现在，访问<code>http://localhost:8080/ping</code>，能看到<code>Hello!</code></p>
<h3 id="连接前后端"><a href="#连接前后端" class="headerlink" title="连接前后端"></a>连接前后端</h3><p>通过使用<code>axios</code>库发送 AJAX 请求，<code>axios</code>安装如下：<br><img src="/images/pasted-36.png" alt="upload successful"></p>
<p>更新<code>Ping.vue</code>组件中<code>script</code>部分，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">script&gt;</span><br><span class="line">import axios from &#39;axios&#39;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;Ping&#39;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &#39;&#39;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getMessage() &#123;</span><br><span class="line">      const path &#x3D; &#39;http:&#x2F;&#x2F;localhost:5000&#x2F;ping&#39;;</span><br><span class="line">      axios.get(path)</span><br><span class="line">        .then((res) &#x3D;&gt; &#123;</span><br><span class="line">          this.msg &#x3D; res.data;</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((error) &#x3D;&gt; &#123;</span><br><span class="line">          &#x2F;&#x2F; eslint-disable-next-line</span><br><span class="line">          console.error(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    this.getMessage();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>启动后端 Flask 应用，访问<code>http://localhost:8080/ping</code>，会看到页面会呈现后端返回的数据。</p>
<h2 id="Bootstrap-Setup"><a href="#Bootstrap-Setup" class="headerlink" title="Bootstrap Setup"></a>Bootstrap Setup</h2><p>为了给页面增加样式，可以引入 CSS 框架 <code>bootstrap</code>，通过如下命令安装<code>bootstrap</code>：<br><img src="/images/pasted-37.png" alt="upload successful"></p>
<p>在 app 的入口文件<code>client/src/main.js</code>中导入 <code>bootstrap</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#39;bootstrap&#x2F;dist&#x2F;css&#x2F;bootstrap.css&#39;;</span><br><span class="line">import Vue from &#39;vue&#39;;</span><br><span class="line">import App from &#39;.&#x2F;App&#39;;</span><br><span class="line">import router from &#39;.&#x2F;router&#39;;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip &#x3D; false;</span><br><span class="line"></span><br><span class="line">&#x2F;* eslint-disable no-new *&#x2F;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#39;#app&#39;,</span><br><span class="line">  router,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: &#39;&lt;App&#x2F;&gt;&#39;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>去掉根组件<code>client/src/App.vue</code>中多余的样式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
<p>在<code>Ping.vue</code>组件中增加样式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">    &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-primary&quot;&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>
<p>再次访问<code>http://localhost:8080/ping</code>查看效果如下：<br><img src="/images/pasted-38.png" alt="upload successful"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>flask</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask-Vue-Crud - 02. 添加组件及CRUD操作</title>
    <url>/2018/07/22/Flask-Vue-Crud-02-%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D%E5%8F%8A%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="添加-Books-组件"><a href="#添加-Books-组件" class="headerlink" title="添加 Books 组件"></a>添加 Books 组件</h2><p>新建组件<code>src/components/Books.vue</code>：</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">      &lt;p&gt;books&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">&#x2F;* eslint-disable *&#x2F; </span><br><span class="line">import axios from &#39;axios&#39;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;Books&#39;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>更新路由如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &#39;vue&#39;;</span><br><span class="line">import Router from &#39;vue-router&#39;;</span><br><span class="line">import HelloWorld from &#39;@&#x2F;components&#x2F;HelloWorld&#39;;</span><br><span class="line">import Ping from &#39;@&#x2F;components&#x2F;Ping&#39;;</span><br><span class="line">import Books from &#39;@&#x2F;components&#x2F;Books&#39;;</span><br><span class="line"></span><br><span class="line">Vue.use(Router);</span><br><span class="line"></span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#39;&#x2F;&#39;,</span><br><span class="line">      name: &#39;books&#39;,</span><br><span class="line">      component: Books,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#39;&#x2F;ping&#39;,</span><br><span class="line">      name: &#39;Ping&#39;,</span><br><span class="line">      component: Ping,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#39;&#x2F;books&#39;,</span><br><span class="line">      name: &#39;Books&#39;,</span><br><span class="line">      component: Books,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  mode: &#39;history&#39;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>修改 Books 组件的样式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;col-sm-10&quot;&gt;</span><br><span class="line">        &lt;h1&gt;书籍&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;hr&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">        &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-success btn-sm&quot;&gt;添加&lt;&#x2F;button&gt;</span><br><span class="line">        &lt;br&gt;&lt;br&gt;</span><br><span class="line">        &lt;table class&#x3D;&quot;table table-hover&quot;&gt;</span><br><span class="line">          &lt;thead&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;th&gt;书名&lt;&#x2F;th&gt;</span><br><span class="line">              &lt;th&gt;作者&lt;&#x2F;th&gt;</span><br><span class="line">              &lt;th&gt;读过？&lt;&#x2F;th&gt;</span><br><span class="line">              &lt;th&gt;&lt;&#x2F;th&gt;</span><br><span class="line">            &lt;&#x2F;tr&gt;</span><br><span class="line">          &lt;&#x2F;thead&gt;</span><br><span class="line">          &lt;tbody&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">              &lt;td&gt;失控&lt;&#x2F;td&gt;</span><br><span class="line">              &lt;td&gt;凯文凯利&lt;&#x2F;td&gt;</span><br><span class="line">              &lt;td&gt;是&lt;&#x2F;td&gt;</span><br><span class="line">              &lt;td&gt;</span><br><span class="line">                &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-warning btn-sm&quot;&gt;更新&lt;&#x2F;button&gt;</span><br><span class="line">                &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-danger btn-sm&quot;&gt;删除&lt;&#x2F;button&gt;</span><br><span class="line">              &lt;&#x2F;td&gt;</span><br><span class="line">            &lt;&#x2F;tr&gt;</span><br><span class="line">          &lt;&#x2F;tbody&gt;</span><br><span class="line">        &lt;&#x2F;table&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>
<p>接下来，就可以集中处理<code>CRUD</code>的功能逻辑了。</p>
<h2 id="GET-操作"><a href="#GET-操作" class="headerlink" title="GET 操作"></a>GET 操作</h2><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>首先，在后台构造书籍数据，修改<code>app.py</code>文件，添加书籍列表，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BOOKS &#x3D; [</span><br><span class="line">    &#123;</span><br><span class="line">        &#39;title&#39;: &#39;失控&#39;,</span><br><span class="line">        &#39;author&#39;: &#39;凯文凯利&#39;,</span><br><span class="line">        &#39;read&#39;: True</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &#39;title&#39;: &#39;黑客与画家&#39;,</span><br><span class="line">        &#39;author&#39;: &#39;保罗格雷厄姆&#39;,</span><br><span class="line">        &#39;read&#39;: False</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &#39;title&#39;: &#39;未来简史&#39;,</span><br><span class="line">        &#39;author&#39;: &#39;尤瓦尔赫拉利&#39;,</span><br><span class="line">        &#39;read&#39;: True</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>添加路由处理，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@app.route(&#39;&#x2F;books&#39;, methods&#x3D;[&#39;GET&#39;])</span><br><span class="line">def all_books():</span><br><span class="line">    return jsonify(&#123;</span><br><span class="line">        &#39;status&#39;: &#39;success&#39;,</span><br><span class="line">        &#39;books&#39;: BOOKS</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>
<p>运行 Flask 应用，手动测试路由：<code>http://localhost:5000/books</code></p>
<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>更新组件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;tbody&gt;</span><br><span class="line">	 &lt;tr v-for&#x3D;&quot;(book, index) in books&quot; :key&#x3D;&quot;index&quot;&gt;</span><br><span class="line">	     &lt;td&gt;&#123;&#123; book.title &#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">	     &lt;td&gt;&#123;&#123; book.author&#125;&#125;&lt;&#x2F;td&gt;</span><br><span class="line">	     &lt;td&gt;</span><br><span class="line">	         &lt;span v-if&#x3D;&quot;book.read&quot;&gt;是&lt;&#x2F;span&gt;</span><br><span class="line">	         &lt;span v-else&gt;否&lt;&#x2F;span&gt;</span><br><span class="line">	     &lt;&#x2F;td&gt;</span><br><span class="line">	     &lt;td&gt;</span><br><span class="line">	         &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-warning btn-sm&quot;&gt;更新&lt;&#x2F;button&gt;</span><br><span class="line">	         &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-danger btn-sm&quot;&gt;删除&lt;&#x2F;button&gt;</span><br><span class="line">	     &lt;&#x2F;td&gt;</span><br><span class="line">	 &lt;&#x2F;tr&gt;</span><br><span class="line">&lt;&#x2F;tbody&gt;</span><br><span class="line">...</span><br><span class="line">&lt;script&gt;</span><br><span class="line">&#x2F;* eslint-disable *&#x2F; </span><br><span class="line">import axios from &#39;axios&#39;; </span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      books: [],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getBooks() &#123;</span><br><span class="line">      const path &#x3D; &#39;http:&#x2F;&#x2F;localhost:5000&#x2F;books&#39;;</span><br><span class="line">      axios.get(path)</span><br><span class="line">        .then((res) &#x3D;&gt; &#123;</span><br><span class="line">          this.books &#x3D; res.data.books;</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((error) &#x3D;&gt; &#123;</span><br><span class="line">          &#x2F;&#x2F; eslint-disable-next-line</span><br><span class="line">          console.error(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    this.getBooks();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="POST-操作"><a href="#POST-操作" class="headerlink" title="POST 操作"></a>POST 操作</h2><p>在点击添加按钮时，我们希望弹出模态对话框，然后键入书籍信息，bootstrap 的 modal 组件使用 jQuery，而 Vue 使用虚Dom，所以，尽量避免 jQuery 和 Vue 同时使用。为此，可使用 Bootstrap Vue 这个库来进行样式处理。</p>
<h3 id="Bootstrap-Vue"><a href="#Bootstrap-Vue" class="headerlink" title="Bootstrap Vue"></a>Bootstrap Vue</h3><p>执行如下命令，安装 bootstrap-vue ：<br><img src="/images/pasted-39.png" alt="upload successful"></p>
<p>在 app 的入口文件<code>client/src/main.js</code>中导入<code>bootstrap-vue</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#39;bootstrap&#x2F;dist&#x2F;css&#x2F;bootstrap.css&#39;;</span><br><span class="line">import BootstrapVue from &#39;bootstrap-vue&#39;;</span><br><span class="line">import Vue from &#39;vue&#39;;</span><br><span class="line">import App from &#39;.&#x2F;App&#39;;</span><br><span class="line">import router from &#39;.&#x2F;router&#39;;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip &#x3D; false;</span><br><span class="line"></span><br><span class="line">Vue.use(BootstrapVue);</span><br><span class="line"></span><br><span class="line">&#x2F;* eslint-disable no-new *&#x2F;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#39;#app&#39;,</span><br><span class="line">  router,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: &#39;&lt;App&#x2F;&gt;&#39;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="服务端-1"><a href="#服务端-1" class="headerlink" title="服务端"></a>服务端</h3><p>更新路由函数，使其支持 POST 请求：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from flask import Flask, jsonify, request</span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;books&#39;, methods&#x3D;[&#39;GET&#39;, &#39;POST&#39;])</span><br><span class="line">def all_books():</span><br><span class="line">    res_obj &#x3D; &#123;&#39;status&#39;: &#39;success&#39;&#125;;</span><br><span class="line">    if request.method &#x3D;&#x3D; &#39;POST&#39;:</span><br><span class="line">        post_data &#x3D; request.get_json()</span><br><span class="line">        BOOKS.append(</span><br><span class="line">            &#123;</span><br><span class="line">                &#39;title&#39;: post_data.get(&#39;title&#39;),</span><br><span class="line">                &#39;author&#39;: post_data.get(&#39;author&#39;),</span><br><span class="line">                &#39;read&#39;: post_data.get(&#39;read&#39;)</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">        res_obj[&#39;message&#39;] &#x3D; &#39;添加成功！&#39;</span><br><span class="line">    else:</span><br><span class="line">        res_obj[&#39;books&#39;] &#x3D; BOOKS</span><br><span class="line"></span><br><span class="line">    return jsonify(res_obj)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>
<p>在终端中测试如下：<br><img src="/images/pasted-40.png" alt="upload successful"></p>
<h3 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h3><p>增加添加书籍的模态呈现代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;b-modal ref&#x3D;&quot;addBookModal&quot;</span><br><span class="line">         id&#x3D;&quot;book-modal&quot;</span><br><span class="line">         title&#x3D;&quot;添加一本新书&quot;</span><br><span class="line">         hide-footer&gt;</span><br><span class="line">        &lt;b-form @submit&#x3D;&quot;onSubmit&quot; @reset&#x3D;&quot;onReset&quot;&gt;</span><br><span class="line">            &lt;b-form-group id&#x3D;&quot;form-title-group&quot;</span><br><span class="line">                label&#x3D;&quot;书名：&quot;</span><br><span class="line">                label-for&#x3D;&quot;form-title-input&quot;&gt;</span><br><span class="line">                &lt;b-form-input id&#x3D;&quot;form-title-input&quot;</span><br><span class="line">                    type&#x3D;&quot;text&quot;</span><br><span class="line">                    v-model&#x3D;&quot;addBookForm.title&quot;</span><br><span class="line">                    required</span><br><span class="line">                    placeholder&#x3D;&quot;请输入书名&quot;&gt;</span><br><span class="line">                &lt;&#x2F;b-form-input&gt;</span><br><span class="line">            &lt;&#x2F;b-form-group&gt;</span><br><span class="line">            &lt;b-form-group id&#x3D;&quot;form-author-group&quot;</span><br><span class="line">                  label&#x3D;&quot;作者：&quot;</span><br><span class="line">                  label-for&#x3D;&quot;form-author-input&quot;&gt;</span><br><span class="line">                &lt;b-form-input id&#x3D;&quot;form-author-input&quot;</span><br><span class="line">                      type&#x3D;&quot;text&quot;</span><br><span class="line">                      v-model&#x3D;&quot;addBookForm.author&quot;</span><br><span class="line">                      required</span><br><span class="line">                      placeholder&#x3D;&quot;请输入作者&quot;&gt;</span><br><span class="line">                &lt;&#x2F;b-form-input&gt;</span><br><span class="line">            &lt;&#x2F;b-form-group&gt;</span><br><span class="line">            &lt;b-form-group id&#x3D;&quot;form-read-group&quot;&gt;</span><br><span class="line">                &lt;b-form-checkbox-group v-model&#x3D;&quot;addBookForm.read&quot; id&#x3D;&quot;form-checks&quot;&gt;</span><br><span class="line">                    &lt;b-form-checkbox value&#x3D;&quot;true&quot;&gt;读过?&lt;&#x2F;b-form-checkbox&gt;</span><br><span class="line">                &lt;&#x2F;b-form-checkbox-group&gt;</span><br><span class="line">            &lt;&#x2F;b-form-group&gt;</span><br><span class="line">            &lt;b-button type&#x3D;&quot;submit&quot; variant&#x3D;&quot;primary&quot;&gt;提交&lt;&#x2F;b-button&gt;</span><br><span class="line">            &lt;b-button type&#x3D;&quot;reset&quot; variant&#x3D;&quot;danger&quot;&gt;取消&lt;&#x2F;b-button&gt;</span><br><span class="line">        &lt;&#x2F;b-form&gt;</span><br><span class="line">&lt;&#x2F;b-modal&gt;</span><br></pre></td></tr></table></figure>
<p>以上代码插入在最后一个封闭的 div 之前。</p>
<p>接着，更新 <code>script</code> 部分：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">&#x2F;* eslint-disable *&#x2F; </span><br><span class="line">import axios from &#39;axios&#39;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;Books&#39;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        books: [],</span><br><span class="line">        addBookForm: &#123;</span><br><span class="line">            title: &#39;&#39;,</span><br><span class="line">            author: &#39;&#39;,</span><br><span class="line">            read: [],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">      getBooks() &#123;</span><br><span class="line">          const path &#x3D; &quot;http:&#x2F;&#x2F;localhost:5000&#x2F;books&quot;;</span><br><span class="line">          axios.get(path).then(</span><br><span class="line">              (res) &#x3D;&gt; &#123;</span><br><span class="line">                  this.books &#x3D; res.data.books;</span><br><span class="line">              &#125;</span><br><span class="line">          ).catch(</span><br><span class="line">              (error) &#x3D;&gt; &#123;</span><br><span class="line">                  console.error(error);</span><br><span class="line">              &#125;</span><br><span class="line">          );</span><br><span class="line">      &#125;,</span><br><span class="line">      addBook(payload) &#123;</span><br><span class="line">          const path &#x3D; &#39;http:&#x2F;&#x2F;localhost:5000&#x2F;books&#39;;</span><br><span class="line">          axios.post(path, payload).then(</span><br><span class="line">              (res) &#x3D;&gt; &#123;</span><br><span class="line">                  this.getBooks();</span><br><span class="line">              &#125;</span><br><span class="line">          ).catch(</span><br><span class="line">              (error) &#x3D;&gt; &#123;</span><br><span class="line">                  console.error(error);</span><br><span class="line">                  this.getBooks();</span><br><span class="line">              &#125;</span><br><span class="line">          );</span><br><span class="line">    &#125;,</span><br><span class="line">    initForm() &#123;</span><br><span class="line">        this.addBookForm.title &#x3D; &quot;&quot;;</span><br><span class="line">        this.addBookForm.author &#x3D; &quot;&quot;;</span><br><span class="line">        this.addBookForm.read &#x3D; [];</span><br><span class="line">    &#125;,</span><br><span class="line">    onSubmit(evt) &#123;</span><br><span class="line">        evt.preventDefault();</span><br><span class="line">        this.$refs.addBookModal.hide();</span><br><span class="line">        let read &#x3D; false;</span><br><span class="line">        if (this.addBookForm.read[0]) read &#x3D; true;</span><br><span class="line">        const payload &#x3D; &#123;</span><br><span class="line">            title: this.addBookForm.title,</span><br><span class="line">            author: this.addBookForm.author,</span><br><span class="line">            read, &#x2F;&#x2F; property shorthand</span><br><span class="line">        &#125;;</span><br><span class="line">        this.addBook(payload);</span><br><span class="line">        this.initForm();</span><br><span class="line">    &#125;,</span><br><span class="line">    onReset(evt) &#123;</span><br><span class="line">        evt.preventDefault();</span><br><span class="line">        this.$refs.addBookModal.hide();</span><br><span class="line">        this.initForm();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">      this.getBooks();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>最后，在模板中更新<code>添加</code>按钮，使点击按钮时出现模态对话框：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-success btn-sm&quot; v-b-modal.book-modal&gt;添加&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>
<h3 id="Alert-组件"><a href="#Alert-组件" class="headerlink" title="Alert 组件"></a>Alert 组件</h3><p>接着，添加 Alert 组件用来向用户展示添加新书后的消息。</p>
<h4 id="测试版"><a href="#测试版" class="headerlink" title="测试版"></a>测试版</h4><p>首先，添加新的组件<code>client/src/components</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p&gt;It works!&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>
<p>接着，在 Books 组件中导入并注册该组件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &#39;axios&#39;;</span><br><span class="line">import Alert from &#39;.&#x2F;Alert&#39;;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      books: [],</span><br><span class="line">      addBookForm: &#123;</span><br><span class="line">        title: &#39;&#39;,</span><br><span class="line">        author: &#39;&#39;,</span><br><span class="line">        read: [],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    alert: Alert,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>现在就可以在模板中使用该组件了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;col-sm-10&quot;&gt;</span><br><span class="line">        &lt;h1&gt;书籍&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;hr&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">        &lt;alert&gt;&lt;&#x2F;alert&gt;</span><br><span class="line">        &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;btn btn-success btn-sm&quot; v-b-modal.book-modal&gt;添加&lt;&#x2F;button&gt;</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>
<p>刷新浏览器，能看到该组件生效了：<br><img src="/images/pasted-41.png" alt="upload successful"></p>
<h4 id="真实版"><a href="#真实版" class="headerlink" title="真实版"></a>真实版</h4><p>接下来，在<code>Alert</code>组件中添加真正的<code>b-alert</code>组件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;b-alert variant&#x3D;&quot;success&quot; show&gt;&#123;&#123; message &#125;&#125;&lt;&#x2F;b-alert&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&#39;message&#39;],</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>试着在父组件<code>Books</code>中，向 <code>message</code>属性传值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;alert message&#x3D;&quot;hi&quot;&gt;&lt;&#x2F;alert&gt;</span><br></pre></td></tr></table></figure>
<p>浏览器结果如下所示：<br><img src="/images/pasted-42.png" alt="upload successful"></p>
<p>为了真正实现动态消息，在<code>Books</code>组件中，进行数据绑定：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;alert :message&#x3D;&quot;message&quot;&gt;&lt;&#x2F;alert&gt;</span><br></pre></td></tr></table></figure>
<p>然后，在<code>data</code>选项中，添加<code>message</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    books: [],</span><br><span class="line">    addBookForm: &#123;</span><br><span class="line">      title: &#39;&#39;,</span><br><span class="line">      author: &#39;&#39;,</span><br><span class="line">      read: [],</span><br><span class="line">    &#125;,</span><br><span class="line">    message: &#39;&#39;,</span><br><span class="line">    showMsg: false,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>接着，在<code>addBook</code>中，更新<code>message</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">addBook(payload) &#123;</span><br><span class="line">            const path &#x3D; &#39;http:&#x2F;&#x2F;localhost:5000&#x2F;books&#39;;</span><br><span class="line">            axios.post(path, payload).then(</span><br><span class="line">                (res) &#x3D;&gt; &#123;</span><br><span class="line">                    this.getBooks();</span><br><span class="line">                    this.message &#x3D; &#39;添加成功！&#39;;</span><br><span class="line">                    this.showMsg &#x3D; true;</span><br><span class="line">                &#125;</span><br><span class="line">            ).catch(</span><br><span class="line">                (error) &#x3D;&gt; &#123;</span><br><span class="line">                    console.error(error);</span><br><span class="line">                    this.getBooks();</span><br><span class="line">                &#125;</span><br><span class="line">            );</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h2 id="PUT-操作"><a href="#PUT-操作" class="headerlink" title="PUT 操作"></a>PUT 操作</h2><h3 id="服务端-2"><a href="#服务端-2" class="headerlink" title="服务端"></a>服务端</h3><p>考虑到更新书的内容，书必须有一个唯一的标识符。可以使用 python 的 <code>uuid</code>库。</p>
<p>更新 <code>app.py</code> 中的 <code>BOOKS</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import uuid</span><br><span class="line"></span><br><span class="line">BOOKS &#x3D; [</span><br><span class="line">    &#123;</span><br><span class="line">        &#39;id&#39;: uuid.uuid4().hex,</span><br><span class="line">        &#39;title&#39;: &#39;失控&#39;,</span><br><span class="line">        &#39;author&#39;: &#39;凯文凯利&#39;,</span><br><span class="line">        &#39;read&#39;: True</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &#39;id&#39;: uuid.uuid4().hex,</span><br><span class="line">        &#39;title&#39;: &#39;黑客与画家&#39;,</span><br><span class="line">        &#39;author&#39;: &#39;保罗格雷厄姆&#39;,</span><br><span class="line">        &#39;read&#39;: False</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &#39;id&#39;: uuid.uuid4().hex,</span><br><span class="line">        &#39;title&#39;: &#39;未来简史&#39;,</span><br><span class="line">        &#39;author&#39;: &#39;尤瓦尔赫拉利&#39;,</span><br><span class="line">        &#39;read&#39;: True</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>重构<code>all_books</code>方法，为每一个新添加的书添加<code>id</code>字段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@app.route(&#39;&#x2F;books&#39;, methods&#x3D;[&#39;GET&#39;, &#39;POST&#39;])</span><br><span class="line">def all_books():</span><br><span class="line">    res_obj &#x3D; &#123;&#39;status&#39;: &#39;success&#39;&#125;;</span><br><span class="line">    if request.method &#x3D;&#x3D; &#39;POST&#39;:</span><br><span class="line">        post_data &#x3D; request.get_json()</span><br><span class="line">        BOOKS.append(</span><br><span class="line">            &#123;</span><br><span class="line">                &#39;id&#39;: uuid.uuid4().hex,</span><br><span class="line">                &#39;title&#39;: post_data.get(&#39;title&#39;),</span><br><span class="line">                &#39;author&#39;: post_data.get(&#39;author&#39;),</span><br><span class="line">                &#39;read&#39;: post_data.get(&#39;read&#39;)</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">        res_obj[&#39;message&#39;] &#x3D; &#39;添加成功！&#39;</span><br><span class="line">    else:</span><br><span class="line">        res_obj[&#39;books&#39;] &#x3D; BOOKS</span><br><span class="line"></span><br><span class="line">    return jsonify(res_obj)</span><br></pre></td></tr></table></figure>
<p>添加新的路由处理：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@app.route(&#39;&#x2F;books&#x2F;&lt;book_id&gt;&#39;, methods&#x3D;[&#39;PUT&#39;])</span><br><span class="line">def single_book(book_id):</span><br><span class="line">    response_object &#x3D; &#123;&#39;status&#39;: &#39;success&#39;&#125;</span><br><span class="line">    if request.method &#x3D;&#x3D; &#39;PUT&#39;:</span><br><span class="line">        post_data &#x3D; request.get_json()</span><br><span class="line">        remove_book(book_id)</span><br><span class="line">        BOOKS.append(&#123;</span><br><span class="line">            &#39;id&#39;: uuid.uuid4().hex,</span><br><span class="line">            &#39;title&#39;: post_data.get(&#39;title&#39;),</span><br><span class="line">            &#39;author&#39;: post_data.get(&#39;author&#39;),</span><br><span class="line">            &#39;read&#39;: post_data.get(&#39;read&#39;)</span><br><span class="line">        &#125;)</span><br><span class="line">        response_object[&#39;message&#39;] &#x3D; &#39;更新成功！&#39;</span><br><span class="line">    return jsonify(response_object)</span><br><span class="line"></span><br><span class="line">def remove_book(book_id):</span><br><span class="line">    for book in BOOKS:</span><br><span class="line">        if book[&#39;id&#39;] &#x3D;&#x3D; book_id:</span><br><span class="line">            BOOKS.remove(book)</span><br><span class="line">            return True</span><br><span class="line">    return False</span><br></pre></td></tr></table></figure>
<h3 id="客户端-2"><a href="#客户端-2" class="headerlink" title="客户端"></a>客户端</h3><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol>
<li>添加 modal 和 form</li>
<li>处理更新按钮的点击事件</li>
<li>进行 AJAX 请求</li>
<li>提醒用户</li>
<li>处理取消按钮点击事件</li>
</ol>
<h4 id="添加-modal-和-form"><a href="#添加-modal-和-form" class="headerlink" title="添加 modal 和 form"></a>添加 modal 和 form</h4><p>增加新的更新书籍的模态对话框：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;b-modal ref&#x3D;&quot;editBookModal&quot;</span><br><span class="line">     id&#x3D;&quot;book-update-modal&quot;</span><br><span class="line">     title&#x3D;&quot;更新&quot;</span><br><span class="line">     hide-footer&gt;</span><br><span class="line">    &lt;b-form @submit&#x3D;&quot;onSubmitUpdate&quot; @reset&#x3D;&quot;onResetUpdate&quot;&gt;</span><br><span class="line">        &lt;b-form-group id&#x3D;&quot;form-title-edit-group&quot;</span><br><span class="line">                    label&#x3D;&quot;书名：&quot;</span><br><span class="line">                    label-for&#x3D;&quot;form-title-edit-input&quot;&gt;</span><br><span class="line">        &lt;b-form-input id&#x3D;&quot;form-title-edit-input&quot;</span><br><span class="line">                        type&#x3D;&quot;text&quot;</span><br><span class="line">                        v-model&#x3D;&quot;editForm.title&quot;</span><br><span class="line">                        required</span><br><span class="line">                        placeholder&#x3D;&quot;请输入书名&quot;&gt;</span><br><span class="line">        &lt;&#x2F;b-form-input&gt;</span><br><span class="line">        &lt;&#x2F;b-form-group&gt;</span><br><span class="line">        &lt;b-form-group id&#x3D;&quot;form-author-edit-group&quot;</span><br><span class="line">                    label&#x3D;&quot;作者：&quot;</span><br><span class="line">                    label-for&#x3D;&quot;form-author-edit-input&quot;&gt;</span><br><span class="line">            &lt;b-form-input id&#x3D;&quot;form-author-edit-input&quot;</span><br><span class="line">                        type&#x3D;&quot;text&quot;</span><br><span class="line">                        v-model&#x3D;&quot;editForm.author&quot;</span><br><span class="line">                        required</span><br><span class="line">                        placeholder&#x3D;&quot;请输入作者&quot;&gt;</span><br><span class="line">            &lt;&#x2F;b-form-input&gt;</span><br><span class="line">        &lt;&#x2F;b-form-group&gt;</span><br><span class="line">        &lt;b-form-group id&#x3D;&quot;form-read-edit-group&quot;&gt;</span><br><span class="line">        &lt;b-form-checkbox-group v-model&#x3D;&quot;editForm.read&quot; id&#x3D;&quot;form-checks&quot;&gt;</span><br><span class="line">            &lt;b-form-checkbox value&#x3D;&quot;true&quot;&gt;读过?&lt;&#x2F;b-form-checkbox&gt;</span><br><span class="line">        &lt;&#x2F;b-form-checkbox-group&gt;</span><br><span class="line">        &lt;&#x2F;b-form-group&gt;</span><br><span class="line">        &lt;b-button type&#x3D;&quot;submit&quot; variant&#x3D;&quot;primary&quot;&gt;更新&lt;&#x2F;b-button&gt;</span><br><span class="line">        &lt;b-button type&#x3D;&quot;reset&quot; variant&#x3D;&quot;danger&quot;&gt;取消&lt;&#x2F;b-button&gt;</span><br><span class="line">    &lt;&#x2F;b-form&gt;</span><br><span class="line">&lt;&#x2F;b-modal&gt;</span><br></pre></td></tr></table></figure>
<p>在<code>data</code>选项中添加 <code>editForm</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">editForm: &#123;</span><br><span class="line">  id: &#39;&#39;,</span><br><span class="line">  title: &#39;&#39;,</span><br><span class="line">  author: &#39;&#39;,</span><br><span class="line">  read: [],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h4 id="处理更新按钮的点击事件"><a href="#处理更新按钮的点击事件" class="headerlink" title="处理更新按钮的点击事件"></a>处理更新按钮的点击事件</h4><p>在模板中增加<code>更新</code>按钮的点击事件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button</span><br><span class="line">     type&#x3D;&quot;button&quot;</span><br><span class="line">     class&#x3D;&quot;btn btn-warning btn-sm&quot;</span><br><span class="line">     v-b-modal.book-update-modal</span><br><span class="line">     @click&#x3D;&quot;editBook(book)&quot;&gt;更新</span><br><span class="line">&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>
<p>增加新的方法，用来更新<code>editForm</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">editBook(book) &#123;</span><br><span class="line">  this.editForm &#x3D; book;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>接着，增加<code>提交</code>按钮的处理方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">onSubmitUpdate(evt) &#123;</span><br><span class="line">  evt.preventDefault();</span><br><span class="line">  this.$refs.editBookModal.hide();</span><br><span class="line">  let read &#x3D; false;</span><br><span class="line">  if (this.editForm.read[0]) read &#x3D; true;</span><br><span class="line">  const payload &#x3D; &#123;</span><br><span class="line">    title: this.editForm.title,</span><br><span class="line">    author: this.editForm.author,</span><br><span class="line">    read,</span><br><span class="line">  &#125;;</span><br><span class="line">  this.updateBook(payload, this.editForm.id);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h4 id="进行-AJAX-请求"><a href="#进行-AJAX-请求" class="headerlink" title="进行 AJAX 请求"></a>进行 AJAX 请求</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">updateBook(payload, bookID) &#123;</span><br><span class="line">  const path &#x3D; &#96;http:&#x2F;&#x2F;localhost:5000&#x2F;books&#x2F;$&#123;bookID&#125;&#96;;</span><br><span class="line">  axios.put(path, payload)</span><br><span class="line">    .then(() &#x3D;&gt; &#123;</span><br><span class="line">      this.getBooks();</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch((error) &#x3D;&gt; &#123;</span><br><span class="line">      &#x2F;&#x2F; eslint-disable-next-line</span><br><span class="line">      console.error(error);</span><br><span class="line">      this.getBooks();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h4 id="提醒用户"><a href="#提醒用户" class="headerlink" title="提醒用户"></a>提醒用户</h4><p>更新<code>updateBook</code>，增加如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.message &#x3D; &#39;已更新！&#39;;</span><br><span class="line">this.showMsg &#x3D; true;</span><br></pre></td></tr></table></figure>
<h4 id="处理取消按钮点击事件"><a href="#处理取消按钮点击事件" class="headerlink" title="处理取消按钮点击事件"></a>处理取消按钮点击事件</h4><p>添加处理方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">onResetUpdate(evt) &#123;</span><br><span class="line">  evt.preventDefault();</span><br><span class="line">  this.$refs.editBookModal.hide();</span><br><span class="line">  this.initForm();</span><br><span class="line">  this.getBooks();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>更新<code>initForm</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">initForm() &#123;</span><br><span class="line">  this.addBookForm.title &#x3D; &#39;&#39;;</span><br><span class="line">  this.addBookForm.author &#x3D; &#39;&#39;;</span><br><span class="line">  this.addBookForm.read &#x3D; [];</span><br><span class="line">  this.editForm.id &#x3D; &#39;&#39;;</span><br><span class="line">  this.editForm.title &#x3D; &#39;&#39;;</span><br><span class="line">  this.editForm.author &#x3D; &#39;&#39;;</span><br><span class="line">  this.editForm.read &#x3D; [];</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h2 id="DELETE-操作"><a href="#DELETE-操作" class="headerlink" title="DELETE 操作"></a>DELETE 操作</h2><h3 id="服务端-3"><a href="#服务端-3" class="headerlink" title="服务端"></a>服务端</h3><p>更新路由处理：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@app.route(&#39;&#x2F;books&#x2F;&lt;book_id&gt;&#39;, methods&#x3D;[&#39;PUT&#39;, &#39;DELETE&#39;])</span><br><span class="line">def single_book(book_id):</span><br><span class="line">    response_object &#x3D; &#123;&#39;status&#39;: &#39;success&#39;&#125;</span><br><span class="line">    if request.method &#x3D;&#x3D; &#39;PUT&#39;:</span><br><span class="line">        post_data &#x3D; request.get_json()</span><br><span class="line">        remove_book(book_id)</span><br><span class="line">        BOOKS.append(&#123;</span><br><span class="line">            &#39;id&#39;: uuid.uuid4().hex,</span><br><span class="line">            &#39;title&#39;: post_data.get(&#39;title&#39;),</span><br><span class="line">            &#39;author&#39;: post_data.get(&#39;author&#39;),</span><br><span class="line">            &#39;read&#39;: post_data.get(&#39;read&#39;)</span><br><span class="line">        &#125;)</span><br><span class="line">        response_object[&#39;message&#39;] &#x3D; &#39;更新成功！&#39;</span><br><span class="line">    if request.method &#x3D;&#x3D; &#39;DELETE&#39;:</span><br><span class="line">        remove_book(book_id)</span><br><span class="line">        response_object[&#39;message&#39;] &#x3D; &#39;已移除！&#39;</span><br><span class="line">    return jsonify(response_object)</span><br></pre></td></tr></table></figure>
<h3 id="客户端-3"><a href="#客户端-3" class="headerlink" title="客户端"></a>客户端</h3><p>更新模板中的<code>删除</code>按钮：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button</span><br><span class="line">        type&#x3D;&quot;button&quot;</span><br><span class="line">        class&#x3D;&quot;btn btn-danger btn-sm&quot;</span><br><span class="line">        @click&#x3D;&quot;onDeleteBook(book)&quot;&gt;删除</span><br><span class="line">&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>
<p>添加如下方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">removeBook(bookID) &#123;</span><br><span class="line">  const path &#x3D; &#96;http:&#x2F;&#x2F;localhost:5000&#x2F;books&#x2F;$&#123;bookID&#125;&#96;;</span><br><span class="line">  axios.delete(path)</span><br><span class="line">    .then(() &#x3D;&gt; &#123;</span><br><span class="line">      this.getBooks();</span><br><span class="line">      this.message &#x3D; &#39;已移除！&#39;;</span><br><span class="line">      this.showMessage &#x3D; true;</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch((error) &#x3D;&gt; &#123;</span><br><span class="line">      &#x2F;&#x2F; eslint-disable-next-line</span><br><span class="line">      console.error(error);</span><br><span class="line">      this.getBooks();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br><span class="line">onDeleteBook(book) &#123;</span><br><span class="line">  this.removeBook(book.id);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>flask</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Tricks</title>
    <url>/2019/09/24/Python-tricks/</url>
    <content><![CDATA[<h2 id="18-map-func-iter"><a href="#18-map-func-iter" class="headerlink" title="18. map(func, iter)"></a>18. map(func, iter)</h2><blockquote>
<p>Executes the function func on all elements of the iterable iter.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; list(map(lambda x: x[0], [&#39;red&#39;, &#39;green&#39;, &#39;blue&#39;]))</span><br><span class="line">[&#39;r&#39;, &#39;g&#39;, &#39;b&#39;]</span><br></pre></td></tr></table></figure>
<h2 id="17-map-func-i1-…-ik"><a href="#17-map-func-i1-…-ik" class="headerlink" title="17. map(func, i1, …, ik)"></a>17. map(func, i1, …, ik)</h2><blockquote>
<p>Executes the function func on all k elements of the k iterables.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; list(map(lambda x,y: str(x) + &#39; &#39; + y + &#39;s&#39;, [0, 2, 3], [&#39;apple&#39;, &#39;orange&#39;, &#39;banana&#39;]))</span><br><span class="line">[&#39;0 apples&#39;, &#39;2 oranges&#39;, &#39;3 bananas&#39;]</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="16-string-join-iter"><a href="#16-string-join-iter" class="headerlink" title="16. string.join(iter)"></a>16. string.join(iter)</h2><blockquote>
<p>Concatenates iterable elements iter separated by string.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; &#39; marries &#39;.join(list([&#39;Alice&#39;, &#39;Bob&#39;]))</span><br><span class="line">&#39;Alice marries Bob&#39;</span><br></pre></td></tr></table></figure>
<h2 id="15-filter-function-iterable"><a href="#15-filter-function-iterable" class="headerlink" title="15. filter(function, iterable)"></a>15. filter(function, iterable)</h2><blockquote>
<p>Filters out elements in iterable for which function returns False (or 0).</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; list(filter(lambda x: True if x &gt; 17 else False, [1, 15, 17, 18, 19]))</span><br><span class="line">[18, 19]</span><br></pre></td></tr></table></figure>
<h2 id="14-string-strip"><a href="#14-string-strip" class="headerlink" title="14. string.strip()"></a>14. string.strip()</h2><blockquote>
<p>Removes leading and trailing whitespaces of string.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&quot;   \n  \t   42  \t &quot;.strip())</span><br><span class="line">42</span><br></pre></td></tr></table></figure>
<h2 id="13-sorted-iter"><a href="#13-sorted-iter" class="headerlink" title="13. sorted(iter)"></a>13. sorted(iter)</h2><blockquote>
<p>Sorts iterable iter in ascending order.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; sorted([8, 3, 2, 42, 5])</span><br><span class="line">[2, 3, 5, 8, 42]</span><br></pre></td></tr></table></figure>
<h2 id="12-sorted-iter-key-key"><a href="#12-sorted-iter-key-key" class="headerlink" title="12. sorted(iter, key=key)"></a>12. sorted(iter, key=key)</h2><blockquote>
<p>Sorts according to the key function in ascending order.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; sorted([8, 3, 2, 42, 5], key&#x3D;lambda x: 0 if x&#x3D;&#x3D;42 else x)</span><br><span class="line">[42, 2, 3, 5, 8]</span><br></pre></td></tr></table></figure>
<h2 id="11-help-func"><a href="#11-help-func" class="headerlink" title="11. help(func)"></a>11. help(func)</h2><blockquote>
<p>Returns documentation of func.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; help(str.upper)</span><br><span class="line">Help on method_descriptor:</span><br><span class="line"></span><br><span class="line">upper(self, &#x2F;)</span><br><span class="line">    Return a copy of the string converted to uppercase.</span><br></pre></td></tr></table></figure>
<h2 id="10-zip-i1-i2-…"><a href="#10-zip-i1-i2-…" class="headerlink" title="10. zip(i1, i2, …)"></a>10. zip(i1, i2, …)</h2><blockquote>
<p>Groups the k-th elements of iterators i1, i2, … together.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; list(zip([&#39;Alice&#39;, &#39;Anna&#39;], [&#39;Bob&#39;, &#39;Jon&#39;, &#39;Frank&#39;], [&#39;Jason&#39;, &#39;Mike&#39;]))</span><br><span class="line">[(&#39;Alice&#39;, &#39;Bob&#39;, &#39;Jason&#39;), (&#39;Anna&#39;, &#39;Jon&#39;, &#39;Mike&#39;)]</span><br></pre></td></tr></table></figure>
<h2 id="9-Unzip"><a href="#9-Unzip" class="headerlink" title="9. Unzip"></a>9. Unzip</h2><blockquote>
<p>Equal to: 1) unpack the zipped list, 2) zip the result.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; list(zip(*[(&#39;Alice&#39;, &#39;Bob&#39;, &#39;Jason&#39;), (&#39;Anna&#39;, &#39;Jon&#39;, &#39;Mike&#39;)]))</span><br><span class="line">[(&#39;Alice&#39;, &#39;Anna&#39;), (&#39;Bob&#39;, &#39;Jon&#39;), (&#39;Jason&#39;, &#39;Mike&#39;)]</span><br></pre></td></tr></table></figure>
<h2 id="8-enumerate-iter"><a href="#8-enumerate-iter" class="headerlink" title="8. enumerate(iter)"></a>8. enumerate(iter)</h2><blockquote>
<p>Assigns a counter value to each element of the iterable iter.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; list(enumerate([&#39;Alice&#39;, &#39;Bob&#39;, &#39;Jon&#39;]))</span><br><span class="line">[(0, &#39;Alice&#39;), (1, &#39;Bob&#39;), (2, &#39;Jon&#39;)]</span><br></pre></td></tr></table></figure>
<h2 id="7-Start-a-web-server"><a href="#7-Start-a-web-server" class="headerlink" title="7. Start a web server"></a>7. Start a web server</h2><blockquote>
<p>Want to share files between PC and phone? Run this command in PC’s shell. <P> is any port number 0–65535. Type <IP address of PC>:<P> in the phone’s browser. You can now browse the files in the PC directory.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 -m http.server &lt;Port&gt;</span><br></pre></td></tr></table></figure>
<h2 id="6-Read-comic"><a href="#6-Read-comic" class="headerlink" title="6. Read comic"></a>6. Read comic</h2><blockquote>
<p>Open the comic series xkcd in your web browser.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import antigravity</span><br></pre></td></tr></table></figure>
<h2 id="5-Zen-of-Python"><a href="#5-Zen-of-Python" class="headerlink" title="5. Zen of Python"></a>5. Zen of Python</h2><blockquote>
<p>Get valuable advice of how to write Pythonic code.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import this</span><br></pre></td></tr></table></figure>
<h2 id="4-Swapping-numbers"><a href="#4-Swapping-numbers" class="headerlink" title="4. Swapping numbers"></a>4. Swapping numbers</h2><blockquote>
<p>Swapping variables is a breeze in Python. No offense, Java!</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a, b &#x3D; &#39;Jane&#39;, &#39;Alice&#39;</span><br><span class="line">&gt;&gt;&gt; a, b &#x3D; b, a</span><br><span class="line">&gt;&gt;&gt; print(a, b)</span><br><span class="line">Alice Jane</span><br></pre></td></tr></table></figure>
<h2 id="3-Unpacking-arguments"><a href="#3-Unpacking-arguments" class="headerlink" title="3. Unpacking arguments"></a>3. Unpacking arguments</h2><blockquote>
<p>Use a sequence as function arguments via asterisk operator *. Use a dictionary (key, value) via double asterisk operator **.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; def f(x, y, z):</span><br><span class="line">...     return x + y*z</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; f(*[1,3,4])</span><br><span class="line">13</span><br><span class="line">&gt;&gt;&gt; f(**&#123;&#39;z&#39;:4, &#39;x&#39;:1, &#39;y&#39;:3&#125;)</span><br><span class="line">13</span><br></pre></td></tr></table></figure>
<h2 id="2-Extended-Unpacking"><a href="#2-Extended-Unpacking" class="headerlink" title="2. Extended Unpacking"></a>2. Extended Unpacking</h2><blockquote>
<p>Use unpacking for multiple assignment feature in Python.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a, *b &#x3D; [1, 2, 3, 4, 5]</span><br><span class="line">&gt;&gt;&gt; print(a, b)</span><br><span class="line">1 [2, 3, 4, 5]</span><br></pre></td></tr></table></figure>
<h2 id="1-Merge-two-dictionaries"><a href="#1-Merge-two-dictionaries" class="headerlink" title="1. Merge two dictionaries"></a>1. Merge two dictionaries</h2><blockquote>
<p>Use unpacking to merge two dictionaries into a single one.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; x &#x3D; &#123;&#39;Alice&#39;: 18&#125;</span><br><span class="line">&gt;&gt;&gt; y &#x3D; &#123;&#39;Bob&#39;: 27, &#39;Ann&#39;: 22&#125;</span><br><span class="line">&gt;&gt;&gt; z &#x3D; &#123;**x, **y&#125;</span><br><span class="line">&gt;&gt;&gt; print(z)</span><br><span class="line">&#123;&#39;Alice&#39;: 18, &#39;Bob&#39;: 27, &#39;Ann&#39;: 22&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Installing python3.6 on CENTOS 6.8</title>
    <url>/2017/10/20/Installing-python3-6-on-CENTOS-6-8/</url>
    <content><![CDATA[<ol>
<li><p>Installing the prerequisite package to build python from source </p>
<p> <code>yum -y groupinstall &quot;Development tools&quot;</code><br> <code>yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel</code><br> <code># below is optional:</code><br> <code>yum -y install sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</code></p>
</li>
<li><p>Download the python source</p>
<p> <code>wget https://www.python.org/ftp/python/3.6.3/Python-3.6.3.tgz</code><br> <code>tar xfvz Python-3.6.3.tgz</code><br> <code>cd Python-3.6.3</code></p>
</li>
<li><p>Compiling and install the python from source code</p>
<p> <code>./configure --prefix=/usr/local --enable-shared LDFLAGS=&quot;-Wl,-rpath /usr/local/lib&quot;</code><br> <code>make &amp;&amp; make altinstall</code><br> <code>ln -s /usr/local/bin/python3.6 /usr/bin/python3.6</code><br> <code>ln -s /usr/local/bin/python3.6 /usr/bin/python3</code></p>
</li>
<li><p>Download and install pip</p>
<p> <code>wget https://bootstrap.pypa.io/get-pip.py</code><br> <code>python3 get-pip.py</code><br> <code>ln -s /usr/local/bin/pip3.6 /usr/bin/pip3</code></p>
</li>
<li><p>Python3.6 and Pip3 is ready now</p>
<p> <code>[root@iZm5eah3mqbzffv5h0fremZ Python-3.6.3]# python3 -V</code><br> <code>Python 3.6.3</code><br> <code>[root@iZm5eah3mqbzffv5h0fremZ Python-3.6.3]# pip3 -V</code><br> <code>pip 9.0.1 from /usr/local/lib/python3.6/site-packages (python 3.6)</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>python3</tag>
        <tag>centos</tag>
        <tag>centos6</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0 简明教程 - 02. 组件基础</title>
    <url>/2018/07/19/Vue2-0-%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B-02-%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;components-demo&quot;&gt;</span><br><span class="line">        &lt;button-counter&gt;&lt;&#x2F;button-counter&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">&#x2F;&#x2F; 定义一个名为 button-counter 的新组件</span><br><span class="line">Vue.component(&#39;button-counter&#39;, &#123;</span><br><span class="line">  data: function () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      count: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: &#39;&lt;button v-on:click&#x3D;&quot;count++&quot;&gt;You clicked me &#123;&#123; count &#125;&#125; times.&lt;&#x2F;button&gt;&#39;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">new Vue(&#123; el: &#39;#components-demo&#39; &#125;)</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>组件是可复用的 Vue 实例，且带有一个名字：在这个例子中是 <code>&lt;button-counter&gt;</code>。</p>
<p>我们可以在一个通过 new Vue 创建的 Vue 根实例中，把这个组件作为自定义元素来使用。</p>
<p>因为组件是可复用的 Vue 实例，所以它们与 <code>new Vue</code> 接收相同的选项，例如 <code>data</code>、<code>computed</code>、<code>watch</code>、<code>methods</code> 以及生命周期钩子等。仅有的例外是像 <code>el</code> 这样根实例特有的选项。</p>
<a id="more"></a>

<h2 id="组件的复用"><a href="#组件的复用" class="headerlink" title="组件的复用"></a>组件的复用</h2><p>可以将组件进行任意次数的复用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;components-demo&quot;&gt;</span><br><span class="line">  &lt;button-counter&gt;&lt;&#x2F;button-counter&gt;</span><br><span class="line">  &lt;button-counter&gt;&lt;&#x2F;button-counter&gt;</span><br><span class="line">  &lt;button-counter&gt;&lt;&#x2F;button-counter&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<p>当点击按钮时，每个组件都会各自独立维护它的 <code>count</code>。因为你每用一次组件，就会有一个它的新实例被创建。</p>
<h3 id="data-必须是一个函数"><a href="#data-必须是一个函数" class="headerlink" title="data 必须是一个函数"></a><code>data</code> 必须是一个函数</h3><p>当我们定义这个 <button-counter> 组件时，你可能会发现它的 data 并不是像这样直接提供一个对象：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  count: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>取而代之的是，一个组件的 data 选项必须是一个函数，因此每个实例返回的对象都是各自独立的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data: function () &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    count: 0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="全局注册与局部注册"><a href="#全局注册与局部注册" class="headerlink" title="全局注册与局部注册"></a>全局注册与局部注册</h2><p>用 <code>Vue.component</code>函数注册组件为全局组件，全局注册的组件可以用在其被注册之后的任何 (通过 new Vue) 新创建的 Vue 根实例中，也包括其组件树中的所有子组件的模板中。但全局注册也会有其他的不理想的地方，比如，你使用一个像 webpack 这样的构建系统，全局注册的组件意味着即使你已经不再使用该组件了，它仍然会被包含在你最终的构建结果中。这造成了用户下载的 JavaScript 的无谓的增加。</p>
<p>这种情况下，可以通过一个普通的 Javascript 对象来定义组件，然后在<code>components</code>选项中定义你想要使用的组件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var ComponentA &#x3D; &#123; &#x2F;* ... *&#x2F; &#125;</span><br><span class="line">var ComponentB &#x3D; &#123; &#x2F;* ... *&#x2F; &#125;</span><br><span class="line">var ComponentC &#x3D; &#123; &#x2F;* ... *&#x2F; &#125;</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#39;#app&#39;</span><br><span class="line">  components: &#123;</span><br><span class="line">    &#39;component-a&#39;: ComponentA,</span><br><span class="line">    &#39;component-b&#39;: ComponentB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>局部注册的组件在其子组件中不可用，例如，如果希望<code>ComponentA</code>在<code>ComponentB</code>中可用，则需要这样写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var ComponentA &#x3D; &#123; &#x2F;* ... *&#x2F; &#125;</span><br><span class="line"></span><br><span class="line">var ComponentB &#x3D; &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    &#39;component-a&#39;: ComponentA</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者通过 Babel 和 webpack 使用 ES2015模块，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import ComponentA from &#39;.&#x2F;ComponentA.vue&#39;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    ComponentA</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="通过-prop-向子组件传递数据"><a href="#通过-prop-向子组件传递数据" class="headerlink" title="通过 prop 向子组件传递数据"></a>通过 prop 向子组件传递数据</h2><p>Prop 是指你可以在组件上注册一些自定义属性。当一个值传递给一个 prop 属性的时候，它就变成了那个组件实例的一个属性。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue.component(&#39;blog-post&#39;, &#123;</span><br><span class="line">  props: [&#39;title&#39;],</span><br><span class="line">  template: &#39;&lt;h3&gt;&#123;&#123; title &#125;&#125;&lt;&#x2F;h3&gt;&#39;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>一个 prop 被注册之后，你就可以像如下这样把数据作为一个自定义属性传递进来：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;blog-post title&#x3D;&quot;My journey with Vue&quot;&gt;&lt;&#x2F;blog-post&gt;</span><br><span class="line">&lt;blog-post title&#x3D;&quot;Blogging with Vue&quot;&gt;&lt;&#x2F;blog-post&gt;</span><br><span class="line">&lt;blog-post title&#x3D;&quot;Why Vue is so fun&quot;&gt;&lt;&#x2F;blog-post&gt;</span><br></pre></td></tr></table></figure>
<p>实际应用中，很可能在 Vue 实例的<code>data</code>里有一个 blog 的数组，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#39;#components-demo&#39;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    posts: [</span><br><span class="line">      &#123; id: 1, title: &#39;My journey with Vue&#39; &#125;,</span><br><span class="line">      &#123; id: 2, title: &#39;Blogging with Vue&#39; &#125;,</span><br><span class="line">      &#123; id: 3, title: &#39;Why Vue is so fun&#39; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>然后，在模板中通过<code>v-bind</code>动态渲染每一个 blog</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;blog-post</span><br><span class="line">  v-for&#x3D;&quot;post in posts&quot;</span><br><span class="line">  v-bind:key&#x3D;&quot;post.id&quot;</span><br><span class="line">  v-bind:title&#x3D;&quot;post.title&quot;</span><br><span class="line">&gt;&lt;&#x2F;blog-post&gt;</span><br></pre></td></tr></table></figure>
<h3 id="props-类型验证"><a href="#props-类型验证" class="headerlink" title="props 类型验证"></a>props 类型验证</h3><p>可以为 props 中的值提供一个带有验证需求的对象，而不仅仅是一个字符串数组，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue.component(&#39;my-component&#39;, &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    &#x2F;&#x2F; 基础的类型检查 (&#96;null&#96; 匹配任何类型)</span><br><span class="line">    propA: Number,</span><br><span class="line">    &#x2F;&#x2F; 多个可能的类型</span><br><span class="line">    propB: [String, Number],</span><br><span class="line">    &#x2F;&#x2F; 必填的字符串</span><br><span class="line">    propC: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      required: true</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 带有默认值的数字</span><br><span class="line">    propD: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 100</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 带有默认值的对象</span><br><span class="line">    propE: &#123;</span><br><span class="line">      type: Object,</span><br><span class="line">      &#x2F;&#x2F; 对象或数组且一定会从一个工厂函数返回默认值</span><br><span class="line">      default: function () &#123;</span><br><span class="line">        return &#123; message: &#39;hello&#39; &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 自定义验证函数</span><br><span class="line">    propF: &#123;</span><br><span class="line">      validator: function (value) &#123;</span><br><span class="line">        &#x2F;&#x2F; 这个值必须匹配下列字符串中的一个</span><br><span class="line">        return [&#39;success&#39;, &#39;warning&#39;, &#39;danger&#39;].indexOf(value) !&#x3D;&#x3D; -1</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="通过事件向父级组件发送事件"><a href="#通过事件向父级组件发送事件" class="headerlink" title="通过事件向父级组件发送事件"></a>通过事件向父级组件发送事件</h2><p>通过一个按钮来放大 blog 的字号<br><code>demo</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;blog-posts-events-demo&quot;&gt;</span><br><span class="line">    &lt;div :style&#x3D;&quot;&#123;fontSize: postFontSize+&#39;em&#39;&#125;&quot;&gt;</span><br><span class="line">        &lt;blog-post  </span><br><span class="line">        v-for&#x3D;&quot;post in posts&quot;</span><br><span class="line">        v-bind:key&#x3D;&quot;post.id&quot;</span><br><span class="line">        v-bind:post&#x3D;&quot;post&quot;</span><br><span class="line">        v-on:enlarge-text&#x3D;&quot;postFontSize +&#x3D; 0.1&quot;&gt;</span><br><span class="line">        &lt;&#x2F;blog-post&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.component(&#39;blog-post&#39;, &#123;</span><br><span class="line">        props: [&#39;post&#39;],</span><br><span class="line">        template: &#96;</span><br><span class="line">            &lt;div class&#x3D;&quot;blog-post&quot;&gt;</span><br><span class="line">                &lt;h3&gt;&#123;&#123; post.title &#125;&#125;&lt;&#x2F;h3&gt;</span><br><span class="line">                &lt;button v-on:click&#x3D;&quot;$emit(&#39;enlarge-text&#39;)&quot;&gt;</span><br><span class="line">                Enlarge text</span><br><span class="line">                &lt;&#x2F;button&gt;</span><br><span class="line">                &lt;div v-html&#x3D;&quot;post.content&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &#96; </span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el: &#39;#blog-posts-events-demo&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            posts: [</span><br><span class="line">                &#123; id: 1, title: &#39;My journey with Vue&#39;, content: &#39;&lt;h2&gt;This is the first content&lt;&#x2F;h2&gt;&#39; &#125;,</span><br><span class="line">                &#123; id: 2, title: &#39;Blogging with Vue&#39;, content: &#39;&lt;h2&gt;This is the second content&lt;&#x2F;h2&gt;&#39;&#125;,</span><br><span class="line">                &#123; id: 3, title: &#39;Why Vue is so fun&#39;, content: &#39;&lt;h2&gt;This is the third content&lt;&#x2F;h2&gt;&#39; &#125;</span><br><span class="line">            ],</span><br><span class="line">            postFontSize: 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="使用事件抛出一个值"><a href="#使用事件抛出一个值" class="headerlink" title="使用事件抛出一个值"></a>使用事件抛出一个值</h3><p>如果想要控制每次点击要放大的值，可以用<code>$emit</code>的第二个参数来控制：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button v-on:click&#x3D;&quot;$emit(&#39;enlarge-text&#39;, 0.1)&quot;&gt;</span><br><span class="line">  Enlarge text</span><br><span class="line">&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>
<p>然后当在父级组件监听这个事件的时候，我们可以通过<code>$event</code>访问到被抛出的这个值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;blog-post</span><br><span class="line">  ...</span><br><span class="line">  v-on:enlarge-text&#x3D;&quot;postFontSize +&#x3D; $event&quot;</span><br><span class="line">&gt;&lt;&#x2F;blog-post&gt;</span><br></pre></td></tr></table></figure>
<p>或者，通过实现处理函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;blog-post</span><br><span class="line">  ...</span><br><span class="line">  v-on:enlarge-text&#x3D;&quot;onEnlargeText&quot;</span><br><span class="line">&gt;&lt;&#x2F;blog-post&gt;</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">  onEnlargeText: function (enlargeAmount) &#123;</span><br><span class="line">    this.postFontSize +&#x3D; enlargeAmount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="通过插槽分发内容"><a href="#通过插槽分发内容" class="headerlink" title="通过插槽分发内容"></a>通过插槽分发内容</h2><p><code>demo</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;slot_demo&quot;&gt;</span><br><span class="line">    &lt;alert-box&gt;</span><br><span class="line">        Something bad happened.</span><br><span class="line">    &lt;&#x2F;alert-box&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">Vue.component(&#39;alert-box&#39;, &#123;</span><br><span class="line">    template: &#96;</span><br><span class="line">        &lt;div class&#x3D;&quot;demo-alert-box&quot;&gt;</span><br><span class="line">        &lt;strong&gt;Error!&lt;&#x2F;strong&gt;</span><br><span class="line">        &lt;slot&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &#96;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el: &#39;#slot_demo&#39;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2.0 简明教程 - 01. 安装与介绍</title>
    <url>/2018/07/19/Vue2-0-%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B-01-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="00-Vue-Devtools"><a href="#00-Vue-Devtools" class="headerlink" title="00. Vue Devtools"></a>00. Vue Devtools</h3><p><code>Vue Devtools</code> is a browser devtools extension for debugging Vue.js applications</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">安装路径：</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;vuejs&#x2F;vue-devtools#vue-devtools</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="01-直接引入"><a href="#01-直接引入" class="headerlink" title="01. 直接引入"></a>01. 直接引入</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="02-脚手架：命令行工具（CLI）"><a href="#02-脚手架：命令行工具（CLI）" class="headerlink" title="02. 脚手架：命令行工具（CLI）"></a>02. 脚手架：命令行工具（CLI）</h3><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="00-概念综述"><a href="#00-概念综述" class="headerlink" title="00. 概念综述"></a>00. 概念综述</h3><p>从技术角度讲，Vue.js 专注于 MVVM 模型的 ViewModel 层。它通过双向数据绑定把 View 层和 Model 层连接了起来。实际的 DOM 封装和输出格式都被抽象为了 Directives 和 Filters。</p>
<p><img src="/images/pasted-27.png"></p>
<h4 id="ViewModel"><a href="#ViewModel" class="headerlink" title="ViewModel"></a>ViewModel</h4><p>一个同步 Model 和 View 的对象。在 Vue.js 中，每个 Vue 实例都是一个 ViewModel。它们是通过构造函数 Vue 或其子类被创建出来的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var vm &#x3D; new Vue(&#123; &#x2F;* options *&#x2F; &#125;)</span><br></pre></td></tr></table></figure>
<p>这是您作为一个开发者在使用 Vue.js 时主要打交道的对象。</p>
<h4 id="视图-View"><a href="#视图-View" class="headerlink" title="视图 (View)"></a>视图 (View)</h4><p>被 Vue 实例管理的 DOM 节点。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vm.$el &#x2F;&#x2F; The View</span><br></pre></td></tr></table></figure>
<p>Vue.js 使用基于 DOM 的模板。每个 Vue 实例都关联着一个相应的 DOM 元素。当一个 Vue 实例被创建时，它会递归遍历根元素的所有子结点，同时完成必要的数据绑定。当这个视图被编译之后，它就会自动响应数据的变化。</p>
<p>在使用 Vue.js 时，除了自定义指令 (稍后会有解释)，您几乎不必直接接触 DOM。当数据发生变化时，视图将会自动触发更新。这些更新的粒度精确到一个文字节点。同时为了更好的性能，这些更新是批量异步执行的。</p>
<h4 id="模型-Model"><a href="#模型-Model" class="headerlink" title="模型 (Model)"></a>模型 (Model)</h4><p>一个轻微改动过的原生 JavaScript 对象。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vm.$data &#x2F;&#x2F; The Model</span><br></pre></td></tr></table></figure>
<p>Vue.js 中的模型就是普通的 JavaScript 对象——也可以称为<code>数据对象</code>。一旦某对象被作为 Vue 实例中的数据，它就成为一个 <code>响应式</code> 的对象了。你可以操作它们的属性，同时正在观察它的 Vue 实例也会收到提示。</p>
<p>Vue 实例代理了它们观察到的数据对象的所有属性。所以一旦一个对象 <code>&#123; a: 1 &#125;</code> 被观察，那么 <code>vm.$data.a</code> 和 <code>vm.a</code> 将会返回相同的值，而设置 <code>vm.a = 2</code> 则也会修改 <code>vm.$data</code>。</p>
<h4 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h4><p>在 Vue 中以前缀<code>v-</code>开始的被称为指令。如<code>v-text</code>、<code>v-bind</code>、<code>v-on</code>等。</p>
<h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><p>过滤器是用于在更新视图之前处理原始值的函数。它们通过一个 “管道” 来进行处理：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;&#123;&#123;message | capitalize&#125;&#125;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<p>这样在 div 的文本内容被更新之前，message 的值会先传给 capitalizie 函数处理。</p>
<h4 id="Vue-实例"><a href="#Vue-实例" class="headerlink" title="Vue 实例"></a>Vue 实例</h4><p>每个 Vue 应用都是通过用 Vue 函数创建一个新的 Vue 实例开始的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var vm &#x3D; new Vue(&#123;</span><br><span class="line">  &#x2F;&#x2F; 选项</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>当一个 Vue 实例被创建时，它向 Vue 的响应式系统中加入了其 data 对象中能找到的所有的属性。当这些属性的值发生改变时，视图将会产生“响应”，即匹配更新为新的值。</p>
<p>当这些数据改变时，视图会进行重渲染。值得注意的是只有当实例被创建时 data 中存在的属性才是响应式的。也就是说如果你添加一个新的属性，对其的改动将不会触发任何视图的更新。如果你知道你会在晚些时候需要一个属性，但是一开始它为空或不存在，那么你仅需要设置一些初始值。比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  newTodoText: &#39;&#39;,</span><br><span class="line">  visitCount: 0,</span><br><span class="line">  hideCompletedTodos: false,</span><br><span class="line">  todos: [],</span><br><span class="line">  error: null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="01-声明式渲染"><a href="#01-声明式渲染" class="headerlink" title="01. 声明式渲染"></a>01. 声明式渲染</h3><p>Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统。<br><code>demo1</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &#123;&#123; message &#125;&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">var app &#x3D; new Vue(&#123;</span><br><span class="line">    el: &#39;#app&#39;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        message: &#39;Hello Vue!&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>上面的<code>new Vue()</code>函数用来创建一个 vue 实例。除了文本插值，我们还可以通过<code>v-bind</code>指令来将数据绑定到元素属性。<br><code>demo2</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app-2&quot;&gt;</span><br><span class="line">    &lt;span v-bind:title&#x3D;&quot;message&quot;&gt;</span><br><span class="line">      鼠标悬停几秒钟查看此处动态绑定的提示信息！</span><br><span class="line">    &lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">var app2 &#x3D; new Vue(&#123;</span><br><span class="line">  el: &#39;#app-2&#39;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: &#39;页面加载于 &#39; + new Date().toLocaleString()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="02-条件与循环"><a href="#02-条件与循环" class="headerlink" title="02. 条件与循环"></a>02. 条件与循环</h3><p>条件指令：<code>v-if</code><br><code>demo3</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;div id&#x3D;&quot;app-3&quot;&gt;</span><br><span class="line">    &lt;p v-if&#x3D;&quot;seen&quot;&gt;现在你看到我了&lt;&#x2F;p&gt;</span><br><span class="line"> &lt;&#x2F;div&gt;</span><br><span class="line"> var app3 &#x3D; new Vue(&#123;</span><br><span class="line">  el: &#39;#app-3&#39;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    seen: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>循环指令：<code>v-for</code><br><code>demo4</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app-4&quot;&gt;</span><br><span class="line">  &lt;ol&gt;</span><br><span class="line">    &lt;li v-for&#x3D;&quot;todo in todos&quot;&gt;</span><br><span class="line">      &#123;&#123; todo.text &#125;&#125;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">  &lt;&#x2F;ol&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">var app4 &#x3D; new Vue(&#123;</span><br><span class="line">  el: &#39;#app-4&#39;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    todos: [</span><br><span class="line">      &#123; text: &#39;学习 JavaScript&#39; &#125;,</span><br><span class="line">      &#123; text: &#39;学习 Vue&#39; &#125;,</span><br><span class="line">      &#123; text: &#39;整个牛项目&#39; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="03-用户交互"><a href="#03-用户交互" class="headerlink" title="03. 用户交互"></a>03. 用户交互</h3><p>通过<code>v-on</code>指令，响应用户点击按钮的事件<br><code>demo5</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app-5&quot;&gt;</span><br><span class="line">   &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">   &lt;button v-on:click&#x3D;&quot;reverseMessage&quot;&gt;逆转消息&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">var app5 &#x3D; new Vue(&#123;</span><br><span class="line">  el: &#39;#app-5&#39;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: &#39;Hello Vue.js!&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    reverseMessage: function () &#123;</span><br><span class="line">      this.message &#x3D; this.message.split(&#39;&#39;).reverse().join(&#39;&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>通过<code>v-model</code>指令，可以实现表单输入和应用状态之间的双向绑定。<br><code>demo6</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app-6&quot;&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;input v-model&#x3D;&quot;message&quot;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">var app6 &#x3D; new Vue(&#123;</span><br><span class="line">  el: &#39;#app-6&#39;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: &#39;Hello Vue!&#39;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="04-组件化应用构建"><a href="#04-组件化应用构建" class="headerlink" title="04. 组件化应用构建"></a>04. 组件化应用构建</h3><p>组件系统是 Vue 的另一个重要概念，组件化是指，在大型项目中将应用的界面抽象成一个个小型、独立和可复用的组件数来构建，如下图所示：<br><img src="/images/pasted-28.png"></p>
<p>在 Vue 里，一个组件本质上是一个拥有预定义选项的一个 Vue 实例。Vue 组件非常类似自定义元素，相比自定义元素，Vue 组件的表现在所有支持的浏览器上表现一致，还有些其他自定义组件没有的功能。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app-7&quot;&gt;</span><br><span class="line">   &lt;ol&gt;</span><br><span class="line">   &lt;!--</span><br><span class="line">     现在我们为每个 todo-item 提供 todo 对象</span><br><span class="line">     todo 对象是变量，即其内容可以是动态的。</span><br><span class="line">     我们也需要为每个组件提供一个“key”，稍后再</span><br><span class="line">     作详细解释。</span><br><span class="line">   --&gt;</span><br><span class="line">     &lt;todo-item</span><br><span class="line">       v-for&#x3D;&quot;item in groceryList&quot;</span><br><span class="line">       v-bind:todo&#x3D;&quot;item&quot;</span><br><span class="line">       v-bind:key&#x3D;&quot;item.id&quot;&gt;</span><br><span class="line">     &lt;&#x2F;todo-item&gt;</span><br><span class="line">   &lt;&#x2F;ol&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">Vue.component(&#39;todo-item&#39;, &#123;</span><br><span class="line">  props: [&#39;todo&#39;],</span><br><span class="line">  template: &#39;&lt;li&gt;&#123;&#123; todo.text &#125;&#125;&lt;&#x2F;li&gt;&#39;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">var app7 &#x3D; new Vue(&#123;</span><br><span class="line">  el: &#39;#app-7&#39;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    groceryList: [</span><br><span class="line">      &#123; id: 0, text: &#39;蔬菜&#39; &#125;,</span><br><span class="line">      &#123; id: 1, text: &#39;奶酪&#39; &#125;,</span><br><span class="line">      &#123; id: 2, text: &#39;随便其它什么人吃的东西&#39; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>6个鲜为人知的 Zsh 技巧和窍门</title>
    <url>/2021/02/18/Zsh-%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>在 unix/linux 操作系统环境中，我们会经常讨论 shell、终端和命令行接口。Bash 可能是最有名的 shell，但在 Mac 电脑中，Zsh 可能是最为流行的 shell 了。</p>
<h2 id="什么是-Zsh？"><a href="#什么是-Zsh？" class="headerlink" title="什么是 Zsh？"></a>什么是 Zsh？</h2><p>Zsh 也被称为 z Shell，它扩展了 Bourne Shell (sh)的功能，提供了更新的特性以及对插件和主题的更多支持。从2019年的 MacOS Catalina 开始，Zsh 成为 Mac 电脑中默认的登录和交互式 shell。</p>
<a id="more"></a>

<h2 id="安装-Zsh"><a href="#安装-Zsh" class="headerlink" title="安装 Zsh"></a>安装 Zsh</h2><p>在 Mac 电脑上，你可以使用 Homebrew 来安装 Zsh。<code>brew install zsh</code></p>
<p>当安装完 Zsh 后，你也可以安装最流行的 Zsh 插件，<code>oh-my-Zsh</code>，这个插件有很多内置插件和主题，使用如下安装脚本:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;master&#x2F;tools&#x2F;install.sh)&quot;</span><br></pre></td></tr></table></figure>
<h2 id="6个鲜为人知的-Zsh-技巧和窍门"><a href="#6个鲜为人知的-Zsh-技巧和窍门" class="headerlink" title="6个鲜为人知的 Zsh 技巧和窍门"></a>6个鲜为人知的 Zsh 技巧和窍门</h2><ol>
<li><p><code>take</code> 命令</p>
<blockquote>
<p>这个命令是 mkdir 和 cd 两个命令的组合。也可以根据需要生成中间目录。</p>
</blockquote>
</li>
<li><p>指定命令查看历史</p>
<blockquote>
<p>输入指定命令，再按向上箭头，可循环遍历以该命令开头的历史记录</p>
</blockquote>
</li>
<li><p><code>zmv</code></p>
<blockquote>
<p>用 zmv 重命名大量文件。首先，运行 <code>autoload zmv</code> 来安装 <code>zmv</code>。然后执行如下命令：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zmv &#39;(*).(jpg|jpeg)&#39; &#39;demo-$1.$2&#39;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>zcalc</code></p>
<blockquote>
<p>在命令行中打开计算器，首先，运行 <code>autoload zcalc</code> 来安装 <code>zcalc</code> 。然后就可以执行 <code>zcalc</code> 命令。</p>
</blockquote>
</li>
<li><p><code>Ctrl-q </code></p>
<blockquote>
<p>当你输入了一条长的命令，发现需要在其之前先执行一条命令时，就可以按 <code>Ctrl-q</code> 暂存当前命令，然后输入另外一条命令，当另外这条命令执行结束后，会自动重新填充好暂存的命令。</p>
</blockquote>
</li>
<li><p><code>ctrl-x-e</code></p>
<blockquote>
<p>当你输入了一条很长的命令，发现命令中间有地方输入错误时，可以按 <code>ctrl-x-e</code> 将该命令拷贝到编辑器中进行编辑，编辑完后，保存退出即可。</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
        <category>tools</category>
      </categories>
      <tags>
        <tag>zsh</tag>
      </tags>
  </entry>
  <entry>
    <title>以太坊（ETH）挖矿收益分析</title>
    <url>/2018/03/08/%E4%BB%A5%E5%A4%AA%E5%9D%8A%EF%BC%88ETH%EF%BC%89%E6%8C%96%E7%9F%BF%E6%94%B6%E7%9B%8A%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="挖矿相对于投资的优缺点"><a href="#挖矿相对于投资的优缺点" class="headerlink" title="挖矿相对于投资的优缺点"></a>挖矿相对于投资的优缺点</h2><p>挖矿的优点：</p>
<ol>
<li>即使数字加密货币一文不值，显卡仍然值钱</li>
<li>如果所挖币种行情大跌，可以根据情况随时切换其他币种</li>
</ol>
<p>挖矿的弊端：</p>
<ol>
<li>火灾风险（须做好通风和防尘）</li>
<li>电费开支</li>
<li>不断增长的全网算力</li>
<li>PoW 切 PoS 风险</li>
</ol>
<h2 id="矿机选型"><a href="#矿机选型" class="headerlink" title="矿机选型"></a>矿机选型</h2><ul>
<li>型号及规格：超腾 AMD 570 八卡设计（功耗1.5 kW，算力240 Mh/s）</li>
<li>单台价格：28500 RMB <a id="more"></a></li>
</ul>
<h2 id="算力"><a href="#算力" class="headerlink" title="算力"></a>算力</h2><ul>
<li>全网算力：264.76 Th/s</li>
<li>单台算力：240 Mh/s</li>
</ul>
<h2 id="单台矿机挖矿成本和费用"><a href="#单台矿机挖矿成本和费用" class="headerlink" title="单台矿机挖矿成本和费用"></a>单台矿机挖矿成本和费用</h2><ul>
<li>矿机：<ul>
<li>单台：2.85 wRMB</li>
</ul>
</li>
<li>电费：<ul>
<li>每月耗电量：1.5 kWh * 24 h * 30 day * 20 = 21600 kWh</li>
<li>每月电费：21600 kWh * 0.4 RMB = 8640 RMB</li>
<li>每年电费：8640 RMB * 12 = 11 wRMB</li>
<li>平均每台每月电费均摊：432 RMB</li>
</ul>
</li>
<li>网费：<ul>
<li> 双网络备份：2000 RMB</li>
<li> 平均每台每月网费均摊：8 RMB</li>
</ul>
</li>
<li>场地：<ul>
<li> TBD </li>
</ul>
</li>
<li>制冷：<ul>
<li> TBD</li>
</ul>
</li>
<li>人工：<ul>
<li>TBD</li>
</ul>
</li>
</ul>
<h2 id="挖矿产出"><a href="#挖矿产出" class="headerlink" title="挖矿产出"></a>挖矿产出</h2><p><img src="/images/pasted-4.png" alt="upload successful"><br><img src="/images/pasted-5.png" alt="upload successful"><br><img src="/images/pasted-6.png" alt="upload successful"><br><img src="/images/pasted-7.png" alt="upload successful"></p>
<h2 id="收益分析"><a href="#收益分析" class="headerlink" title="收益分析"></a>收益分析</h2><ul>
<li>挖矿半年产出： 折合 8587 RMB</li>
<li>8块显卡，变现折合 8 * 2000 = 1.6 wRMB</li>
<li>收益：8587+16000-28500 = <code>-3913 RMB</code></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>ETH</tag>
      </tags>
  </entry>
  <entry>
    <title>Git Submodule 使用教程</title>
    <url>/2018/03/08/Git-Submodule-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="创建测试项目"><a href="#创建测试项目" class="headerlink" title="创建测试项目"></a>创建测试项目</h2><h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建测试目录</span><br><span class="line">mkdir git_submodule</span><br><span class="line">cd git_submodule</span><br><span class="line"># 创建本地裸仓库</span><br><span class="line">mkdir repos</span><br><span class="line">cd repos</span><br><span class="line">git init --bare lib1.git</span><br><span class="line">git init --bare lib2.git</span><br><span class="line">git init --bare project1.git</span><br><span class="line">git init --bare project2.git</span><br><span class="line"># 创建工作区目录</span><br><span class="line">cd ..</span><br><span class="line">mkdir ws</span><br><span class="line">cd ws</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="初始化测试项目-project1-和-project2"><a href="#初始化测试项目-project1-和-project2" class="headerlink" title="初始化测试项目 project1 和 project2"></a>初始化测试项目 project1 和 project2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 初始化 project1</span><br><span class="line">git clone ..&#x2F;repos&#x2F;project1.git</span><br><span class="line">cd project1</span><br><span class="line">echo &quot;project1&quot; &gt; project_infos.txt</span><br><span class="line">git add .</span><br><span class="line">git ci -m &quot;init project1&quot;</span><br><span class="line"># 初始化 project2</span><br><span class="line">cd ..</span><br><span class="line">git clone ..&#x2F;repos&#x2F;project2.git</span><br><span class="line">cd project2</span><br><span class="line">echo &quot;project2&quot; &gt; project_infos.txt</span><br><span class="line">git add .</span><br><span class="line">git ci -m &quot;init project2&quot;</span><br></pre></td></tr></table></figure>
<h3 id="初始化公共类库-lib1-和-lib2"><a href="#初始化公共类库-lib1-和-lib2" class="headerlink" title="初始化公共类库 lib1 和 lib2"></a>初始化公共类库 lib1 和 lib2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 初始化公共类库 lib1</span><br><span class="line">cd ..</span><br><span class="line">git clone ..&#x2F;repos&#x2F;lib1.git</span><br><span class="line">cd lib1</span><br><span class="line">echo &quot;This is lib1&quot; &gt; lib1_features</span><br><span class="line">git add .</span><br><span class="line">git ci -m &quot;init lib1&quot;</span><br><span class="line">git push origin master</span><br><span class="line"># 初始化公共类库 lib2</span><br><span class="line">cd ..</span><br><span class="line">git clone ..&#x2F;repos&#x2F;lib2.git</span><br><span class="line">cd lib2</span><br><span class="line">echo &quot;This is lib2&quot; &gt; lib2_features</span><br><span class="line">git add .</span><br><span class="line">git ci -m &quot;init lib2&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>
<h2 id="为-project1-添加-submodules-lib1-和-lib2"><a href="#为-project1-添加-submodules-lib1-和-lib2" class="headerlink" title="为 project1 添加 submodules ( lib1 和 lib2 )"></a>为 project1 添加 submodules ( lib1 和 lib2 )</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ..&#x2F;project1</span><br><span class="line">git submodule add ..&#x2F;..&#x2F;repos&#x2F;lib1.git libs&#x2F;lib1</span><br><span class="line">git submodule add ..&#x2F;..&#x2F;repos&#x2F;lib2.git libs&#x2F;lib2</span><br></pre></td></tr></table></figure>
<p>此时，执行<code>ls</code>命令，会发现多了个<code>libs</code>目录<br><img src="/images/pasted-12.png" alt="upload successful"></p>
<p>接着，查看状态，会发现<code>lib1</code>、<code>lib2</code>和另外一个新文件<code>.gitmodules</code>都已经被加入了暂存区<br><img src="/images/pasted-13.png" alt="upload successful"></p>
<p>先看一下<code>lib1</code>和<code>lib2</code>里面的文件的内容，跟公共类库内容一致<br><img src="/images/pasted-14.png" alt="upload successful"></p>
<p>接着看一下<code>.gitmodules</code>的内容，会发现 <code>.gitmodules</code>记录了每个         Submodules 的引用信息（在当前项目的位置以及引用仓库的URL）<br><img src="/images/pasted-15.png" alt="upload successful"></p>
<p>最后，执行如下命令，将更改提交并推送到远程仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git ci -a -m &quot;add submodules[lib1,lib2] to project1&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>
<h2 id="模拟开发人员-B-对-submodules-的修改"><a href="#模拟开发人员-B-对-submodules-的修改" class="headerlink" title="模拟开发人员 B 对 submodules 的修改"></a>模拟开发人员 B 对 submodules 的修改</h2><h3 id="开发人员-B-克隆测试项目-project1"><a href="#开发人员-B-克隆测试项目-project1" class="headerlink" title="开发人员 B 克隆测试项目 project1"></a>开发人员 B 克隆测试项目 project1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ..</span><br><span class="line">git clone ..&#x2F;repos&#x2F;project1.git project1-b</span><br><span class="line">cd project1-b</span><br></pre></td></tr></table></figure>
<p>执行<code>git submodule</code>命令，会发现列出了所有子模块(Submodules)，但是，hash 码前面有一个<code>-</code>号，表明该子模块还没有检出<br><img src="/images/pasted-16.png" alt="upload successful"></p>
<p>接下来，检出 project1-b 的所有子模块，执行<code>git submodule init</code>命令<br><img src="/images/pasted-17.png" alt="upload successful"></p>
<p>上一步，仅完成了子模块在当前项目的注册，想检出子模块的内容，还需要执行<code>git submodule update</code>命令<br><img src="/images/pasted-18.png" alt="upload successful"></p>
<h3 id="开发人员-B-修改子模块-lib1"><a href="#开发人员-B-修改子模块-lib1" class="headerlink" title="开发人员 B 修改子模块 lib1"></a>开发人员 B 修改子模块 lib1</h3><p>首先，进入<code>lib1</code>所在的目录，并查看状态<br><img src="/images/pasted-19.png" alt="upload successful"></p>
<p>要修改<code>lib1</code>的文件，首先需要切换到相应的分支<br><img src="/images/pasted-20.png" alt="upload successful"></p>
<p>修改、提交、推送</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &#39;added by developer B&#39; &gt;&gt; lib1_features</span><br><span class="line">git add .</span><br><span class="line">git ci -m &quot;update lib1_features by developer B&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>
<h3 id="开发人员-B-在项目-project1-b-目录中，提交更新并推送"><a href="#开发人员-B-在项目-project1-b-目录中，提交更新并推送" class="headerlink" title="开发人员 B 在项目(project1-b)目录中，提交更新并推送"></a>开发人员 B 在项目(project1-b)目录中，提交更新并推送</h3><p>回到<code>project1-b</code>所在的目录，会发现<code>project1-b</code>的状态发生了变化，很好理解，因为我们更改了子模块里面的文件，子模块也属于项目<code>project1-b</code>本身<br><img src="/images/pasted-21.png" alt="upload successful"></p>
<p>最后一步，在<code>project1-b</code>项目中提交更新，并推送</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git ci -m &quot;update libs&#x2F;lib1 by developer B&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>
<h2 id="在-project1-中同步开发人员-B-对-submodules-做的修改"><a href="#在-project1-中同步开发人员-B-对-submodules-做的修改" class="headerlink" title="在 project1 中同步开发人员 B 对 submodules 做的修改"></a>在 project1 中同步开发人员 B 对 submodules 做的修改</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ..&#x2F;project1</span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure>
<p>查看状态，会发现<code>libs/lib1</code>处于<code>modified</code><br><img src="/images/pasted-22.png" alt="upload successful"></p>
<p>很好理解，我们需要手动更新 submodules 的更新<br><img src="/images/pasted-23.png" alt="upload successful"></p>
<p>至此，我们就在 project1 中成功同步了开发人员 B 对 submodules 所做的修改了</p>
<h2 id="为-project2-添加-submodules-lib1-和-lib2"><a href="#为-project2-添加-submodules-lib1-和-lib2" class="headerlink" title="为 project2 添加 submodules ( lib1 和 lib2 )"></a>为 project2 添加 submodules ( lib1 和 lib2 )</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ..&#x2F;project2</span><br><span class="line">git submodule add ..&#x2F;..&#x2F;repos&#x2F;lib1.git libs&#x2F;lib1</span><br><span class="line">git submodule add ..&#x2F;..&#x2F;repos&#x2F;lib2.git libs&#x2F;lib2</span><br><span class="line">git add .</span><br><span class="line">git ci -m &quot;add submodules[lib1,lib2] to project2&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>
<h2 id="在-project2-中修改-lib1-和-lib2-并同步到-project1-中"><a href="#在-project2-中修改-lib1-和-lib2-并同步到-project1-中" class="headerlink" title="在 project2 中修改 lib1 和 lib2 并同步到 project1 中"></a>在 project2 中修改 lib1 和 lib2 并同步到 project1 中</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 在 lib1 中添加一个文件 README</span><br><span class="line">cd libs&#x2F;lib1</span><br><span class="line">echo &quot;This is lib1 readme contents&quot; &gt; README</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;add README for lib1&quot;</span><br><span class="line">git push origin master</span><br><span class="line">cd ..</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;update lib1 - add README&quot;</span><br><span class="line"></span><br><span class="line"># 修改 lib2 中的 lib2-features 文件</span><br><span class="line">cd libs&#x2F;lib2</span><br><span class="line">echo &quot;some new feature&quot; &gt;&gt; lib2_features</span><br><span class="line">git add .</span><br><span class="line">git ci -m &quot;add some new feature into lib2_features&quot;</span><br><span class="line">git push origin master</span><br><span class="line">cd ..&#x2F;..&#x2F;</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;update lib2 - add some new features&quot;</span><br><span class="line"></span><br><span class="line"># 推送 project2 的修改</span><br><span class="line">git push origin master</span><br><span class="line"></span><br><span class="line"># 在 project1 中更新 lib1 和 lib2 的最新修改，并推送</span><br><span class="line">cd ..&#x2F;project1</span><br><span class="line">git pull origin master</span><br><span class="line">cd libs&#x2F;lib1</span><br><span class="line">git co master</span><br><span class="line">git pull origin master</span><br><span class="line">cd ..&#x2F;lib2</span><br><span class="line">git pull</span><br><span class="line">cd ..&#x2F;..&#x2F;</span><br><span class="line">git ci -a -m &quot;update lib1 and lib2 to new version&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
<h2 id="更新-project1-b-项目的子模块"><a href="#更新-project1-b-项目的子模块" class="headerlink" title="更新 project1-b 项目的子模块"></a>更新 project1-b 项目的子模块</h2><p>根据以上的操作，我们总结出来了修改并更新子模块的基本流程</p>
<ul>
<li>切换到子模块的某个分支</li>
<li>修改子模块</li>
<li>提交子模块的修改</li>
<li>推送子模块的修改</li>
<li>在项目目录提交子模块的修改</li>
<li>在项目目录推送子模块的修改</li>
<li>在其他项目的项目目录新(pull)子模块的修改</li>
<li>在其他项目的子模块目录中依次更新(pull)</li>
<li>在其他项目的项目目录中提交并推送修改</li>
</ul>
<p>事实上，修改子模块、提交和推送的操作确实需要一步步细致地进行，不过在其他项目中，更新对子模块的修改，步骤太繁琐。幸运的是我们可以使用<code>git submodule foreach git pull</code>命令，一步到位完成各子模块的同步更新。</p>
<p>最后，在项目目录中提交并推送</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ..&#x2F;project1-b</span><br><span class="line">git pull</span><br><span class="line">git submodule foreach git pull</span><br><span class="line">git ci -a -m &quot;update libs1 and libs2 to new version&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<h2 id="新成员加入团队，一次性克隆项目和-submodules"><a href="#新成员加入团队，一次性克隆项目和-submodules" class="headerlink" title="新成员加入团队，一次性克隆项目和 submodules"></a>新成员加入团队，一次性克隆项目和 submodules</h2><p>根据已有知识，我们可以这样操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone &#x2F;path&#x2F;to&#x2F;repos&#x2F;foo.git</span><br><span class="line">git submodule init</span><br><span class="line">git submodule update</span><br></pre></td></tr></table></figure>
<p>幸运的是，我们可以一行命令搞定</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone --recursive ..&#x2F;repos&#x2F;foo.git </span><br></pre></td></tr></table></figure>
<p><code>–recursive</code>参数的含义：可以在克隆项目时同时克隆关联的submodules</p>
<h2 id="移除-submodules"><a href="#移除-submodules" class="headerlink" title="移除 submodules"></a>移除 submodules</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git submodule deinit libs&#x2F;lib1</span><br><span class="line">git rm libs&#x2F;lib1</span><br><span class="line">git ci -m &quot;remove libs&#x2F;lib1&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
        <category>tools</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>做一个读书人</title>
    <url>/2016/09/07/%E5%81%9A%E4%B8%80%E4%B8%AA%E8%AF%BB%E4%B9%A6%E4%BA%BA/</url>
    <content><![CDATA[<img src="/2016/09/07/%E5%81%9A%E4%B8%80%E4%B8%AA%E8%AF%BB%E4%B9%A6%E4%BA%BA/zhudeng.jpeg" class="">
<p>中国现有的读书人是何面目？深感自己上了二十几年的学，接受了太多西方的技与艺，反倒丢了太多中国的道与理，不能算作读书人。<br>若论中国的读书人，一切应以「文化」二字开始，《易经》讲「关乎人文，以化成天下」，应该是「文化」二字的来源。引申来说，人文习俗有各种「小异」，但我们应该将各种「小异」化成「大同」，这就是天下一家了。中国人会将家前加上天下，其实之间还有国，国与国和合相与，才能天下大同。<br>中国文化与西方文化不同，西方文化「贵分不贵合」，试想一个大英帝国到现在的美国、加拿大、澳大利亚，哪个不是独立出来的？所以，西方要分不要合，要个人主义，要独立，要平等，要民主不要共和。中国文化主张「和合」与「同化」，所以，我们要香港、澳门、台湾和平回归。试想56个民族是一家，试想现在谁能区分满汉？文化的关键步骤在于教育，所谓教而化之。<a id="more"></a><br>过去读书人都懂修、齐、治、平，所以，很长时间在做一件事，修身，这是将小异趋于大同的前提。若论修身，就不得不提孔子《论语》中讲得「仁」，这是中国独有的字，无任何西式翻译。我从字面上理解的就是二人。东汉学者刘玄曾言「仁者，相人偶」，「偶」很有意思，偶从人从禺，禺走之则为遇，人与人相遇便为偶。西方人讲独立，我们讲偶，这便是仁。夫妻之间称天作佳偶也是仁之意。中国起于农耕社会，过去两人一起耕田称为耦耕，讲的是搭配，搭配之道便是「仁道」。单说「人」字，一撇一捺互为支撑，是故中国社会个人处于人群之中才为人。想想我们骂人时说「不是人」便是骂其反其道吧？说到「仁」，《孟子》里说「仁者，以爱存心，以敬存心」。先说爱，并非夫妇男女之间才有爱，人与人相偶，都要有爱。再说敬，我们都知道东汉典故「相敬如宾」，没有爱何谈敬？《论语》有言「至于犬马，皆能有养，不敬何以别乎」我们都可以养动物，加之以爱，但人与人相偶，爱上必加敬，尤其是对父母。说到这里，想起过往屡屡言辞冲撞父母，实属不敬，悔不当初！孟子还说过「爱人者，人恒爱之。敬人者，人恒敬之」，讲得都是修身与己。这个爱和敬，换作两个词亲爱和尊敬就好理解了。爱就亲亲他，敬就尊着他。人与环境中，总要有可亲、可尊之人，方为幸福。关于爱与敬，我们要做的是我爱与我敬是我的事，不能以此谋求他爱与他敬。西汉董仲舒说过「正其义，不谋其利。明其道，不计其功」，可见「功利」与「道义」是相对的。对人爱与敬，若为计功谋利，则并无爱敬可言。<br>但是修身，要做得东西太多，而之中最重要的是要教化使然。中国过去讲天地君亲师，最后这个师道才是基础，中国过去很重师道，所谓「一日为师终身为父」，直到如今，老师还是在大家心中存有很重的分量。韩愈曾言「师者，所以传道授业解惑也」。只是当下师道弥存，教师再不传道，授业也非传道之业，解惑亦不解道之惑。是故，众人心无归束，必向外索取，茫茫功利场，大千万物，欲望何时有止？此心何时可安，又如何开心？望当下读书人能重习《四书五经》，我附有照片，可供大家参选。</p>
<img src="/2016/09/07/%E5%81%9A%E4%B8%80%E4%B8%AA%E8%AF%BB%E4%B9%A6%E4%BA%BA/sishuwujing.jpeg" class="">

]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>国学</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>区块链 - 信任</title>
    <url>/2018/03/02/%E5%8C%BA%E5%9D%97%E9%93%BE-%E4%BF%A1%E4%BB%BB/</url>
    <content><![CDATA[<p><img src="/images/pasted-0.png" alt="upload successful"><br>在过去的二十几年里，互联网创造了无比的繁荣，也带来了针对大众隐私的极大侵害，道高一尺魔高一丈，<code>摩尔定律</code>还在继续，<code>摩尔的不法之徒定律</code>也在继续。针对隐私和安全的话题，开始在这个数字世界愈发被人关注，而问题的背后，会落到两个字<code>信任</code>。</p>
<p>关于互联网隐私的解决方案从来都没有停止过脚步，早在 1981 年，安全人员就试着通过密码学去尝试解决，无疾而终。1993 年天才数学家戴维·查姆提出了 eCash 系统，不过当时的在线购物人员并不关心网络上的隐私和安全问题，最终戴维·查姆的 DigiCash 在 1998 年宣告破产。之后，戴维·查姆的一个同事尼克·邵博写了一篇题为「上帝协议」的简短论文，在这篇文章中设想了一种无所不能、可以取代所有中间机构的技术协议，即让「上帝」  在一切的交易中扮演可信的第三方。(未完待续…)</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>blockchain</tag>
      </tags>
  </entry>
  <entry>
    <title>在 CentOS 6 上安装 MySQL</title>
    <url>/2018/03/28/%E5%9C%A8-CentOS-6-%E4%B8%8A%E5%AE%89%E8%A3%85-MySQL/</url>
    <content><![CDATA[<h2 id="可选-移除原有-mysql-和-mysql-server"><a href="#可选-移除原有-mysql-和-mysql-server" class="headerlink" title="[可选]移除原有 mysql 和 mysql-server"></a>[可选]移除原有 mysql 和 mysql-server</h2><ol>
<li>使用 yum 移除 MySQL<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum remove mysql mysql-server</span><br></pre></td></tr></table></figure></li>
<li>备份原有 MySQL 配置，或简单删除<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mv &#x2F;var&#x2F;lib&#x2F;mysql&#x2F; &#x2F;var&#x2F;lib&#x2F;mysql_old_backup</span><br><span class="line">或</span><br><span class="line">sudo rm -vR &#x2F;var&#x2F;lib&#x2F;mysql</span><br></pre></td></tr></table></figure>
<a id="more"></a>

</li>
</ol>
<h2 id="安装和启用-MySQL"><a href="#安装和启用-MySQL" class="headerlink" title="安装和启用 MySQL"></a>安装和启用 MySQL</h2><ol start="0">
<li><p>更新系统</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum update</span><br></pre></td></tr></table></figure></li>
<li><p>安装 MySQL，并指定 MySQL 服务的运行级别</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install mysql-server</span><br><span class="line">sudo &#x2F;sbin&#x2F;chkconfig --levels 235 mysqld on</span><br></pre></td></tr></table></figure></li>
<li><p>启动 MySQL 服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo service mysqld start</span><br></pre></td></tr></table></figure></li>
<li><p>提升安全性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure>
<h2 id="使用-MySQL"><a href="#使用-MySQL" class="headerlink" title="使用 MySQL"></a>使用 MySQL</h2></li>
<li><p>以 root 用户登录 MySQL</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure></li>
<li><p>创建新的 MySQL 用户和数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database testdb;</span><br><span class="line">create user &#39;dorayo&#39;@&#39;localhost&#39; identified by &#39;123456&#39;;</span><br><span class="line">grant all on testdb.* to &#39;dorayo&#39; identified by &#39;123456&#39;;</span><br></pre></td></tr></table></figure>
<p> 上面命令也可以如下简化：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database testdb;</span><br><span class="line">grant all on testdb.* to &#39;dorayo&#39; identified by &#39;123456&#39;;</span><br></pre></td></tr></table></figure></li>
<li><p>退出 MySQL</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure></li>
<li><p>以用户<code>dorayo</code>登录 MySQL</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u dorayo -p</span><br></pre></td></tr></table></figure></li>
<li><p>在<code>testdb</code>数据库中创建一个表，包含<code>customer_id</code>、<code>first_name</code>和<code>last_name</code>字段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use testdb;</span><br><span class="line">create table customers (customer_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, first_name TEXT, last_name TEXT);</span><br></pre></td></tr></table></figure></li>
<li><p>退出 MySQL</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>
<h2 id="重置-MySQL-root-用户密码"><a href="#重置-MySQL-root-用户密码" class="headerlink" title="重置 MySQL root 用户密码"></a>重置 MySQL root 用户密码</h2></li>
<li><p>停止 MySQL 服务，重启该服务时带上不需要密码的选项</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo &#x2F;etc&#x2F;init.d&#x2F;mysqld stop</span><br><span class="line">sudo mysqld_safe --skip-grant-tables &amp;</span><br></pre></td></tr></table></figure></li>
<li><p>使用 root 用户重新连接 MySQL 服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u root</span><br></pre></td></tr></table></figure></li>
<li><p>使用如下命令重置 MySQL root 用户密码，替换<code>password</code>为你自己准备设置的 root 密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">update user SET PASSWORD&#x3D;PASSWORD(&quot;password&quot;) WHERE USER&#x3D;&#39;root&#39;;</span><br><span class="line">flush privileges;</span><br><span class="line">exit</span><br></pre></td></tr></table></figure></li>
<li><p>重启 MySQL 服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo service mysqld restart</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>centos</tag>
        <tag>centos6</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>据说，栾川还有这样一个雅致的地方</title>
    <url>/2017/09/24/%E6%8D%AE%E8%AF%B4%EF%BC%8C%E6%A0%BE%E5%B7%9D%E8%BF%98%E6%9C%89%E8%BF%99%E6%A0%B7%E4%B8%80%E4%B8%AA%E9%9B%85%E8%87%B4%E7%9A%84%E5%9C%B0%E6%96%B9/</url>
    <content><![CDATA[<p>眼看一年一度的十一黄金周又要到了，如果，您还没有想好去哪里，欢迎您举家前来栾川游玩哈。</p>
<p>提起「栾川」，近年来，在河南，应该没有几个人会没听过吧。听闻栾川前两天（9月21日）又获批全国首批46个国家生态文明建设示范市县，成为河南唯一获批的地区，真得好庆幸自己生在了美丽的栾川😄</p>
<p>栾川森林覆盖率达82.4%，绿化率达85.05%，均位居全省第一，环境空气优良天数常年保持在320天以上，老君上、鸡冠洞、重渡沟、龙峪湾、伏牛山滑雪场、养子沟、抱犊寨，随随便便都是AAAAA和AAAA景区。在这夏秋交接的当口，来栾川应该会是个最优雅的选择。<a id="more"></a></p>
<p>提到优雅旅行，很多人会皱眉，人多且不说，住哪里，吃什么？也许有些人会说，出来玩，凑合着吃，凑合着住就行，NO！NO！NO！正如标题所说，咱们今天说说来了栾川住哪里。正如标题所言，「栾川还有这样一个优雅的地方」，这次过来，咱们不将就，不凑合！</p>
<p>这个地方就是我家，印象中从98年开始到现在，这个新家已经建成入住快20年了，期间有过几次修葺改造。为了语述方便，这里暂且为庭院命名为「明泽苑」。 </p>
<p>明泽苑坐标「田园小路24号」，沿高杆灯新华书店上坡200米就到。具体地点和外景见下图</p>
<img src="/2017/09/24/%E6%8D%AE%E8%AF%B4%EF%BC%8C%E6%A0%BE%E5%B7%9D%E8%BF%98%E6%9C%89%E8%BF%99%E6%A0%B7%E4%B8%80%E4%B8%AA%E9%9B%85%E8%87%B4%E7%9A%84%E5%9C%B0%E6%96%B9/1.jpg" class="">


<p>进入明泽苑，首先映入眼帘的是一个水景墙，伴着奇花异草，色彩感很强，不啰嗦，直接上图</p>
<img src="/2017/09/24/%E6%8D%AE%E8%AF%B4%EF%BC%8C%E6%A0%BE%E5%B7%9D%E8%BF%98%E6%9C%89%E8%BF%99%E6%A0%B7%E4%B8%80%E4%B8%AA%E9%9B%85%E8%87%B4%E7%9A%84%E5%9C%B0%E6%96%B9/2.jpg" class="">

<p>美学家朱光潜先生曾说过「做学问，做事业，在人生中都只能算是第二桩事。人生第一桩事事生活。我所谓生活是享受，是领略，是培养生机。假若为学问为事业而忘却生活，那种学问和事业在人生中便失其真正意义与价值」 。既然来到栾川，且请就先放下「忙」的自己，享受「闲」的乐趣。您看，「忙」就是心亡，多可怕。再看看「闲」，门里面有木，多么地有生命力啊😄   </p>
<p>明泽苑的主人一看就是个懂得生活情趣的人，主人住在庭院的东侧，咱们重点来看看庭院西侧，这里是一个家庭文娱中心，下图是文娱中心外面的风景</p>
<img src="/2017/09/24/%E6%8D%AE%E8%AF%B4%EF%BC%8C%E6%A0%BE%E5%B7%9D%E8%BF%98%E6%9C%89%E8%BF%99%E6%A0%B7%E4%B8%80%E4%B8%AA%E9%9B%85%E8%87%B4%E7%9A%84%E5%9C%B0%E6%96%B9/3.jpg" class="">
<img src="/2017/09/24/%E6%8D%AE%E8%AF%B4%EF%BC%8C%E6%A0%BE%E5%B7%9D%E8%BF%98%E6%9C%89%E8%BF%99%E6%A0%B7%E4%B8%80%E4%B8%AA%E9%9B%85%E8%87%B4%E7%9A%84%E5%9C%B0%E6%96%B9/4.jpg" class="">
<img src="/2017/09/24/%E6%8D%AE%E8%AF%B4%EF%BC%8C%E6%A0%BE%E5%B7%9D%E8%BF%98%E6%9C%89%E8%BF%99%E6%A0%B7%E4%B8%80%E4%B8%AA%E9%9B%85%E8%87%B4%E7%9A%84%E5%9C%B0%E6%96%B9/5.jpg" class="">
<img src="/2017/09/24/%E6%8D%AE%E8%AF%B4%EF%BC%8C%E6%A0%BE%E5%B7%9D%E8%BF%98%E6%9C%89%E8%BF%99%E6%A0%B7%E4%B8%80%E4%B8%AA%E9%9B%85%E8%87%B4%E7%9A%84%E5%9C%B0%E6%96%B9/6.jpg" class="">

<p>文娱中心对面，庭院内部沿梯而上是楼顶的凉亭摇椅休闲中心，夏天时，我们一家人经常聚在这里吃火锅或烧烤，傍晚时分，在这里坐摇椅、侃大山最是惬意</p>
<img src="/2017/09/24/%E6%8D%AE%E8%AF%B4%EF%BC%8C%E6%A0%BE%E5%B7%9D%E8%BF%98%E6%9C%89%E8%BF%99%E6%A0%B7%E4%B8%80%E4%B8%AA%E9%9B%85%E8%87%B4%E7%9A%84%E5%9C%B0%E6%96%B9/7.jpg" class="">

<p>咱们现在进入文娱中心，这里面更是别有洞天</p>
<img src="/2017/09/24/%E6%8D%AE%E8%AF%B4%EF%BC%8C%E6%A0%BE%E5%B7%9D%E8%BF%98%E6%9C%89%E8%BF%99%E6%A0%B7%E4%B8%80%E4%B8%AA%E9%9B%85%E8%87%B4%E7%9A%84%E5%9C%B0%E6%96%B9/8.jpg" class="">
<p>来看看书柜，从天文、历史、艺术到文学、经济、计算机，总有一类是你喜欢的。题外话，说几部比较经典的大部头，四大名著和明清古典小说系列暂表不提，《毛泽东评点二十四史》和《金瓶梅词话》，却是无论如何您都值得您翻阅一下的😄</p>
<img src="/2017/09/24/%E6%8D%AE%E8%AF%B4%EF%BC%8C%E6%A0%BE%E5%B7%9D%E8%BF%98%E6%9C%89%E8%BF%99%E6%A0%B7%E4%B8%80%E4%B8%AA%E9%9B%85%E8%87%B4%E7%9A%84%E5%9C%B0%E6%96%B9/9.jpg" class="">

<p>再来看这边的茶室</p>
<img src="/2017/09/24/%E6%8D%AE%E8%AF%B4%EF%BC%8C%E6%A0%BE%E5%B7%9D%E8%BF%98%E6%9C%89%E8%BF%99%E6%A0%B7%E4%B8%80%E4%B8%AA%E9%9B%85%E8%87%B4%E7%9A%84%E5%9C%B0%E6%96%B9/10.jpg" class="">

<p>当然，晚上如果有时间，一家人或XDJM们团坐一起打个麻将，也是相当爽的😄</p>
<img src="/2017/09/24/%E6%8D%AE%E8%AF%B4%EF%BC%8C%E6%A0%BE%E5%B7%9D%E8%BF%98%E6%9C%89%E8%BF%99%E6%A0%B7%E4%B8%80%E4%B8%AA%E9%9B%85%E8%87%B4%E7%9A%84%E5%9C%B0%E6%96%B9/11.jpg" class="">

<p>如果，你喜欢运动，追求健康，庭院车库里的悦动生活俱乐部也是个好的去处</p>
<img src="/2017/09/24/%E6%8D%AE%E8%AF%B4%EF%BC%8C%E6%A0%BE%E5%B7%9D%E8%BF%98%E6%9C%89%E8%BF%99%E6%A0%B7%E4%B8%80%E4%B8%AA%E9%9B%85%E8%87%B4%E7%9A%84%E5%9C%B0%E6%96%B9/12.jpg" class="">

<p>各位朋友，如果您来到明泽苑，可以入住二楼西侧，这里之前装修初衷也是为了自家人居住，最早我跟弟弟都在这里住，健康温馨。国际惯例，直接上图<br>客厅</p>
<img src="/2017/09/24/%E6%8D%AE%E8%AF%B4%EF%BC%8C%E6%A0%BE%E5%B7%9D%E8%BF%98%E6%9C%89%E8%BF%99%E6%A0%B7%E4%B8%80%E4%B8%AA%E9%9B%85%E8%87%B4%E7%9A%84%E5%9C%B0%E6%96%B9/13.jpg" class="">

<img src="/2017/09/24/%E6%8D%AE%E8%AF%B4%EF%BC%8C%E6%A0%BE%E5%B7%9D%E8%BF%98%E6%9C%89%E8%BF%99%E6%A0%B7%E4%B8%80%E4%B8%AA%E9%9B%85%E8%87%B4%E7%9A%84%E5%9C%B0%E6%96%B9/14.jpg" class="">

<p>两个卧室</p>
<img src="/2017/09/24/%E6%8D%AE%E8%AF%B4%EF%BC%8C%E6%A0%BE%E5%B7%9D%E8%BF%98%E6%9C%89%E8%BF%99%E6%A0%B7%E4%B8%80%E4%B8%AA%E9%9B%85%E8%87%B4%E7%9A%84%E5%9C%B0%E6%96%B9/15.jpg" class="">

<img src="/2017/09/24/%E6%8D%AE%E8%AF%B4%EF%BC%8C%E6%A0%BE%E5%B7%9D%E8%BF%98%E6%9C%89%E8%BF%99%E6%A0%B7%E4%B8%80%E4%B8%AA%E9%9B%85%E8%87%B4%E7%9A%84%E5%9C%B0%E6%96%B9/16.jpg" class="">

<p>卫生间（干湿分离）</p>
<img src="/2017/09/24/%E6%8D%AE%E8%AF%B4%EF%BC%8C%E6%A0%BE%E5%B7%9D%E8%BF%98%E6%9C%89%E8%BF%99%E6%A0%B7%E4%B8%80%E4%B8%AA%E9%9B%85%E8%87%B4%E7%9A%84%E5%9C%B0%E6%96%B9/17.jpg" class="">

<img src="/2017/09/24/%E6%8D%AE%E8%AF%B4%EF%BC%8C%E6%A0%BE%E5%B7%9D%E8%BF%98%E6%9C%89%E8%BF%99%E6%A0%B7%E4%B8%80%E4%B8%AA%E9%9B%85%E8%87%B4%E7%9A%84%E5%9C%B0%E6%96%B9/18.jpg" class="">

<img src="/2017/09/24/%E6%8D%AE%E8%AF%B4%EF%BC%8C%E6%A0%BE%E5%B7%9D%E8%BF%98%E6%9C%89%E8%BF%99%E6%A0%B7%E4%B8%80%E4%B8%AA%E9%9B%85%E8%87%B4%E7%9A%84%E5%9C%B0%E6%96%B9/19.jpg" class="">

<p>餐厅</p>
<img src="/2017/09/24/%E6%8D%AE%E8%AF%B4%EF%BC%8C%E6%A0%BE%E5%B7%9D%E8%BF%98%E6%9C%89%E8%BF%99%E6%A0%B7%E4%B8%80%E4%B8%AA%E9%9B%85%E8%87%B4%E7%9A%84%E5%9C%B0%E6%96%B9/20.jpg" class="">

<p>厨房</p>
<img src="/2017/09/24/%E6%8D%AE%E8%AF%B4%EF%BC%8C%E6%A0%BE%E5%B7%9D%E8%BF%98%E6%9C%89%E8%BF%99%E6%A0%B7%E4%B8%80%E4%B8%AA%E9%9B%85%E8%87%B4%E7%9A%84%E5%9C%B0%E6%96%B9/21.jpg" class="">

<p>阳台</p>
<img src="/2017/09/24/%E6%8D%AE%E8%AF%B4%EF%BC%8C%E6%A0%BE%E5%B7%9D%E8%BF%98%E6%9C%89%E8%BF%99%E6%A0%B7%E4%B8%80%E4%B8%AA%E9%9B%85%E8%87%B4%E7%9A%84%E5%9C%B0%E6%96%B9/22.jpg" class="">

<p>明泽苑，一切就绪，就差个有趣的您的到来。如果您过来，不管淡季旺季，一律238元/天。当然，如果您想住上个十天半月的，那庭院主人很Nice，可以直接跟庭院主人沟通😄。</p>
<p>最后，欢迎大家十一黄金周来美丽的生态栾川游玩放松，更欢迎各位赏光下榻明泽苑😄</p>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">地点：栾川县城田园小路24号（高杆灯新华书店上坡200米）</span><br><span class="line">住店价格：238元&#x2F;天</span><br><span class="line">咨询电话：13838821288（尤先生）、13838819829（李女士）</span><br></pre></td></tr></table></figure>
<img src="/2017/09/24/%E6%8D%AE%E8%AF%B4%EF%BC%8C%E6%A0%BE%E5%B7%9D%E8%BF%98%E6%9C%89%E8%BF%99%E6%A0%B7%E4%B8%80%E4%B8%AA%E9%9B%85%E8%87%B4%E7%9A%84%E5%9C%B0%E6%96%B9/23.jpg" class="">]]></content>
      <categories>
        <category>生活</category>
        <category>旅行</category>
      </categories>
      <tags>
        <tag>栾川</tag>
      </tags>
  </entry>
  <entry>
    <title>月亮与 B 选项</title>
    <url>/2019/03/10/%E6%9C%88%E4%BA%AE%E4%B8%8E-B-%E9%80%89%E9%A1%B9/</url>
    <content><![CDATA[<p>很喜欢一句话：「满地都是六便士，他却抬头看见了月亮」。</p>
<p>我查过，这句话最早是刘瑜在文章《另一种高度》中致敬毛姆《月亮与六便士》时写下的。</p>
<p>刘瑜那篇文章写得很好，毛姆那本书写得更棒，暂且不表。今天，我只想借此谈谈月亮，如果，还要再谈点什么，我想再谈谈 B 选项。<a id="more"></a></p>
<p>从小就喜欢月亮，少时在老家，多数日子里夜色都很好，浩瀚的星空，月亮显得尤为与众不同。第一次惊叹月亮的神奇是2010年在北京时。有一晚上，疯狂地迷恋黄金分割点，用0.618乘了好多数字，当乘到365时，惊喜地发现这一天是介于农历八月十五和八月十六的日子。这不就是中秋节嘛，当时很兴奋，跟发现了新大陆似的，一年中月亮最圆最大的一天原来就是一年中最美的一天。从此，对月亮多了份神秘的迷恋。</p>
<p>再后来，给公司取名「微潮汐」，再次向月亮致敬。公司 Logo 的设计中也融入了自己对月亮的万千想象。如下：</p>
<p>白日里，太阳就好比叱咤风云的王者，他一出现，光芒万丈。太阳也几乎包揽了所有正能量的寓意。但到了晚上，月亮就像一位安静的女神女神，在静谧的夜空，恬静地等待着众生遥寄情思。</p>
<p>有人曾问过我，为什么如此偏爱月亮。当然绝非仅仅贪恋其美色了☺️。月球对地球的影响太大了，引潮力带来的潮汐现象是海洋生物甚至整个地球生命存在与延续的根本。另外，月球有效地稳定了地球的自转轴线，也让地球上有了稳定的四季更迭，生命有了律动。还有，作为地球的卫星，月球也有效拦截了无数陨石撞地球等宇宙灾难。</p>
<p>我喜欢月亮，更多的是其身上洋溢出的浓浓的人文情愫。当地球执拗地绕着太阳公转时，月球却始终无怨无悔地绕着地球，不离不弃。就这份执着，谁人能不爱月亮？古往今来，无数文人雅士，不吝墨香地留下了很多对月亮的赞美，其中，我最喜欢的依然是宋代词人张先笔下的多情又执着的月亮：「明月却多情，随人处处行」。</p>
<p>朋友，关于月亮，我想我们能一盘花生米，一壶清酒畅聊个通宿。如果，你也喜欢月亮，我们值得交个朋友。</p>
<p>接下来，想聊聊 B 选项。</p>
<p>Facebook 的 COO 女超人桑德伯格在突然丈夫突然离世以后，写了一本书《Option B》，中译为《B 选项》，读后感慨万千。</p>
<p>我们都想要 A 选项，我们都渴望最优解，想拥有完美的人生，可生活有时候会冷不丁地给任何人搞恶作剧，生命无常，当我们没有了 A 选项，我们还要选择 B 选项。</p>
<p>很多人会追悔过往，在不断悔恨中蹉跎了岁月。我曾经也一样，我也曾想：如果，2014年，我没有选择从北京回来，现在是不是会拥有 A 选项的人生。现如今兜兜转转一遭，去不到终点，却回到了原点，确实会有一种无奈和落魄。可，没有了 A 选项，我也在试着坦然接受 B 选项。如曾说的「种一棵树最好的时间是十年前，其次是现在」。逝者不可追，来者犹可待，过往不恋，未来不迎，爱，就用力，做，就走心，拥有了只会更加珍惜，活着反倒更通透了。</p>
<p>我始终相信生活不会给我们想要的，只会给我们应得的。敬畏生命，珍惜时光，B 选项虽不像 A 选项那般闪亮，正如月亮不如太阳那般光芒万丈，但历遭岁月的打磨沉淀，生命多了份韧性和沧桑后，我坚信所有 B 选项的人生，也一样会散发出独特的韵味，值得！</p>
]]></content>
      <categories>
        <category>认知</category>
      </categories>
      <tags>
        <tag>月亮</tag>
      </tags>
  </entry>
  <entry>
    <title>比特币（Bitcoin）挖矿收益分析</title>
    <url>/2018/03/10/%E6%AF%94%E7%89%B9%E5%B8%81%EF%BC%88Bitcoin%EF%BC%89%E6%8C%96%E7%9F%BF%E6%94%B6%E7%9B%8A%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="矿机选型："><a href="#矿机选型：" class="headerlink" title="矿机选型："></a>矿机选型：</h2><ul>
<li>型号及规格：蚂蚁 S9 13.5TH/s 1320W (13.5TH/s batch) </li>
<li>单台价格：14000 RMB</li>
</ul>
<h2 id="难度、出块、电费、矿池费、拒绝率"><a href="#难度、出块、电费、矿池费、拒绝率" class="headerlink" title="难度、出块、电费、矿池费、拒绝率"></a>难度、出块、电费、矿池费、拒绝率</h2><ul>
<li><p>难度： 3290.606 G</p>
</li>
<li><p>出块：12.5</p>
</li>
<li><p>电费：0.4 RMB / kWh</p>
</li>
<li><p>矿池费率：1%</p>
</li>
<li><p>拒绝率：1%</p>
<a id="more"></a>

<h2 id="基于以上测算的收益"><a href="#基于以上测算的收益" class="headerlink" title="基于以上测算的收益"></a>基于以上测算的收益</h2><p><img src="/images/pasted-24.png" alt="upload successful"></p>
</li>
</ul>
<h2 id="长期收益测算"><a href="#长期收益测算" class="headerlink" title="长期收益测算"></a>长期收益测算</h2><ul>
<li>矿机成本：14000 RMB</li>
<li>难度上浮：12% / 月</li>
<li>如果币价：1 BTC = 10000$<br><img src="/images/pasted-25.png" alt="upload successful"></li>
<li>如果币价：1 BTC = 20000$<br><img src="/images/pasted-26.png" alt="upload successful"></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>区块链</category>
      </categories>
  </entry>
  <entry>
    <title>玩转 Git</title>
    <url>/2018/03/08/%E7%8E%A9%E8%BD%AC-Git/</url>
    <content><![CDATA[<h2 id="00-Git-操作一览"><a href="#00-Git-操作一览" class="headerlink" title="00. Git 操作一览"></a>00. Git 操作一览</h2><p><img src="/images/pasted-10.png" alt="upload successful"><br>术语翻译：</p>
<ul>
<li>Workspace：工作区</li>
<li>Index / Stage：暂存区</li>
<li>Repository：版本库、仓库（本地仓库）</li>
<li>Remote：远程仓库</li>
</ul>
<p>补充说明：</p>
<blockquote>
<p>上图不是太准确，在Remote 和 Repository 内部都还有个 Branch 的概念，单不太影响整体理解。<a id="more"></a></p>
</blockquote>
<h2 id="01-Git-配置"><a href="#01-Git-配置" class="headerlink" title="01. Git 配置"></a>01. Git 配置</h2><p><code>配置级别</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--system # 系统级别</span><br><span class="line">--global # 用户全局</span><br><span class="line">--local # 单独一个项目</span><br></pre></td></tr></table></figure>
<p><code>基本配置</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;xxxx&quot; # 用户名</span><br><span class="line">git config --global user.email &quot;xxxx@xxx.com&quot; # 邮箱</span><br><span class="line">git config --global core.editor vim # 编辑器</span><br></pre></td></tr></table></figure>
<p><code>设置别名</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global alias.st status</span><br><span class="line">git config --global alias.ci commit</span><br><span class="line">git config --global alias.co checkout</span><br><span class="line">git config --global alias.br branch</span><br><span class="line">git config --global alias.df diff</span><br><span class="line">git config --global alias.unstage reset</span><br><span class="line">git config --global alias.lg &quot;log --color --graph --pretty&#x3D;format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit&quot;</span><br><span class="line">git config --global alias.last &quot;log --color --graph --pretty&#x3D;format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit -1 HEAD&quot;</span><br></pre></td></tr></table></figure>
<p><code>列出所有配置</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config -l</span><br><span class="line"># git config 命令实际上就是在操作 .gitconfig 文件</span><br></pre></td></tr></table></figure>
<h2 id="02-Git-基本操作"><a href="#02-Git-基本操作" class="headerlink" title="02. Git 基本操作"></a>02. Git 基本操作</h2><p><code>初始化</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git init --bare # 初始化一个裸仓库</span><br></pre></td></tr></table></figure>
<p><code>查看状态</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>
<p><code>将工作区的修改提交到暂存区</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git add &lt;file&gt;</span><br></pre></td></tr></table></figure>
<p><code>将暂存区的内容提交到版本库</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit .</span><br><span class="line">git commit &lt;file&gt;</span><br><span class="line">git commit -am # 相当于 git add + git commit 或 git rm + git commit</span><br><span class="line">git commit --amend</span><br></pre></td></tr></table></figure>
<p><code>查看提交记录</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log</span><br><span class="line">git reflog</span><br><span class="line">git reflog show master</span><br></pre></td></tr></table></figure>
<p><code>撤销工作区修改</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 使用暂存区的内容状态去覆盖工作区的内容状态</span><br><span class="line">git checkout &lt;file&gt; </span><br><span class="line">git checkout .</span><br></pre></td></tr></table></figure>
<p><code>回收站管理</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git stash # 将工作区做的修改暂放到一个 git 回收站中（栈结构）</span><br><span class="line">git stash list # 查看栈中所有记录</span><br><span class="line">git stash apply &lt;回收站记录编号&gt; # 应用回收站记录编号对应的内容到工作区，如果不指定默认为栈顶，注意：恢复后内容还在回收站</span><br><span class="line">git stash pop # 将回收站栈顶的内容恢复到工作区，并从栈中弹出</span><br><span class="line">git stash clear # 清空回收站</span><br></pre></td></tr></table></figure>
<p><code>撤销暂存区修改</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 其实是重置HEAD，将指定版本id的内容状态去覆盖暂存区</span><br><span class="line">git reset &lt;file&gt; # 从暂存区恢复到工作区（不指定版本id，则默认为最后一次提交的版本id）</span><br><span class="line">git reset .</span><br><span class="line">git reset $id # 恢复到指定的提交版本，该$id之后的版本提交都恢复到工作区</span><br><span class="line">git reset --hard $id # （任意门）恢复到指定的提交版本，该$id之后的版本提交全部会被抛弃，将不出现在工作区</span><br></pre></td></tr></table></figure>
<p><code>撤销某次提交</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 提交的回滚操作，不影响其他的提交，会产生新的提交id</span><br><span class="line">git revert &lt;$id&gt;</span><br><span class="line">git revert HEAD</span><br></pre></td></tr></table></figure>
<p><code>删除文件</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm + git commit -am</span><br><span class="line">git rm + git commit</span><br><span class="line">git rm --cached &lt;file&gt; #从暂存区移除该文件，git将不再跟踪该文件的变更，但仍在工作区内，可添加入 .gitignore</span><br></pre></td></tr></table></figure>
<p><code>比较差异</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git diff</span><br><span class="line">git diff &lt;file&gt;#比较工作区与暂存区文件的差异</span><br><span class="line">git diff --cached # 比较暂存区和版本库差异</span><br><span class="line">git diff &lt;$id1&gt;&lt;$id2&gt;# 比较两次提交之间的差异</span><br><span class="line">git diff &lt;branch1&gt;..&lt;branch2&gt;# 在两个分支之间比较</span><br></pre></td></tr></table></figure>
<p><code>Tag</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 列出 tag</span><br><span class="line">git tag</span><br><span class="line"># 打 tag</span><br><span class="line">git tag -a &lt;tag_name&gt; -m &quot;xxx&quot; &lt;commit_id&gt;</span><br><span class="line"># 查看 tag</span><br><span class="line">git show &lt;tag_name&gt;</span><br><span class="line"># 删除本地 tag</span><br><span class="line">git tag -d &lt;tag_name&gt;</span><br><span class="line"># 推送本地 tag 到远程仓库</span><br><span class="line">git push origin &lt;tag_name&gt;</span><br></pre></td></tr></table></figure>
<h2 id="03-Git-分支操作"><a href="#03-Git-分支操作" class="headerlink" title="03. Git 分支操作"></a>03. Git 分支操作</h2><p><code>创建分支</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch &lt;branch_name&gt;</span><br></pre></td></tr></table></figure>
<p><code>查看分支</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch</span><br><span class="line">git branch -r</span><br><span class="line">git branch -a</span><br></pre></td></tr></table></figure>
<p><code>切换分支</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout &lt;branch_name&gt; # 切换分支</span><br><span class="line">git checkout -b &lt;branch_name&gt; # 创建分支并切换</span><br></pre></td></tr></table></figure>
<p><code>删除分支</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch -d &lt;branch_name&gt; # 删除分支</span><br><span class="line">git branch -D &lt;branch_name&gt; # 强制删除分支</span><br><span class="line">git push origin :&lt;branch-name&gt; # 删除远程分支（前提是先在本地删除该分支），原理是把一个空分支push到server上，相当于删除该分支</span><br></pre></td></tr></table></figure>
<p><code>分支重衍</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rebase &lt;base_branch&gt; &lt;branch&gt;</span><br><span class="line">git rebase -i</span><br></pre></td></tr></table></figure>
<h2 id="04-Git-远程操作"><a href="#04-Git-远程操作" class="headerlink" title="04. Git 远程操作"></a>04. Git 远程操作</h2><p><code>克隆</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone &lt;URL&gt;</span><br><span class="line">git clone --bare &lt;URL&gt; # 克隆出一个裸仓库</span><br></pre></td></tr></table></figure>
<p><code>查看远程仓库名字和URL</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>
<p><code>查看远程服务器仓库状态</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote show &lt;repo_name&gt;</span><br></pre></td></tr></table></figure>
<p><code>添加远程仓库</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add &lt;repo_name&gt; &lt;URL&gt;</span><br></pre></td></tr></table></figure>
<p><code>修改远程仓库URL</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote set-url &lt;repo_name&gt; &lt;URL&gt;</span><br></pre></td></tr></table></figure>
<p><code>删除远程仓库</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote rm &lt;repo_name&gt;</span><br></pre></td></tr></table></figure>
<p><code>创建本地分支指向对应远程仓库的分支</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -b &lt;branch_name&gt; origin&#x2F;&lt;branch_name&gt;</span><br><span class="line"># 新版本，可直接使用 git checkout &lt;branch_name&gt;</span><br></pre></td></tr></table></figure>
<p><code>从远程仓库拉取分支并合并</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git fetch &lt;repo_name&gt; &lt;branch_name&gt;</span><br><span class="line">git merge &lt;branch_name&gt;</span><br><span class="line">git pull &lt;repo_name&gt; &lt;branch_name&gt;</span><br><span class="line"># git pull &#x3D; git fetch + git merge</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>往远程仓库推送分支</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push # push所有分支</span><br><span class="line">git push origin master # 将本地主分支推到远程主分支</span><br><span class="line">git push -u origin master # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)</span><br><span class="line">git push origin &lt;local_branch&gt;# 创建远程分支， origin是远程仓库名</span><br><span class="line">git push origin &lt;local_branch&gt;:&lt;remote_branch&gt;# 创建远程分支</span><br><span class="line">git push origin :&lt;remote_branch&gt;# 先删除本地分支(git br -d &lt;branch&gt;)，再执行该 push 命令删除远程分支</span><br></pre></td></tr></table></figure>
<h2 id="05-Git-Submodule"><a href="#05-Git-Submodule" class="headerlink" title="05. Git Submodule"></a>05. Git Submodule</h2><p><code>(详见《Git Submodule 使用教程》)</code></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>tools</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>跑步元思考</title>
    <url>/2013/12/26/%E8%B7%91%E6%AD%A5%E5%85%83%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<p>经不起某人三番五次地念叨，受不住李小龙变成洪金宝的奚落，在深思熟虑半下午之后，我决定开始重塑光辉形象了，哥要甩掉「发福」「变胖」等字眼，重新健身塑形了！  </p>
<p>熟知我过去的人应该都知道，以前我身上是长期贴着「爱生活，爱运动」的标签的，「肥胖」「宅男」，开玩笑，绝对与其绝缘。大学坚持练习了两年跆拳道，毕业后工作第一年又坚持习练了快一年，同时办了张健身卡，每周健身3次以上，坚持了7个月，直到离开天津来到北京。矫情地来说，我是爱运动的。第一次长时间地缺少锻炼是在去了华为之后，我不想找理由，可是，鬼都知道华为的工作节奏。以前的锻炼分为两类，一类是作为功夫爱好者的类似跆拳道，截拳道，特技类的运动，另一类就是健身房里的锻炼。即使健身房里，也绝对是单纯地增肌训练，什么？「动感单车？」「减脂？」，哥当年真不需要。记得在天津华苑第一次办健身卡测的脂肪比例为13%，已经是运动员的脂肪比例范围了，不是盖的！连健美教练都直接问了，你是要进行局部增肌吧？可俗话说「年年岁岁花相似，岁岁年年人不同」，当成长的轨迹到了今天，真没想到我也到了需要「减脂」的时候了。悲哀啊！</p>
<p>说到减脂，首先得澄清一下，市面上各种带着商业目的的减脂器械、按摩疗法和减脂药物基本上都是骗人的，即便当时起了作用，对身体也可能有副作用并且易反弹。扯远了，还是谈谈我对减脂的看法吧，个人认为最佳的减脂方法就是<strong>运动减脂</strong>。当然运动减脂也存在各种误区，想有效运动减脂也得找对方法，这是后话。知乎上关于增肌减脂有个不错的帖子大家可以参考<a href="http://www.zhihu.com/question/20687290/answer/15853608">没有锻炼基础的人，如何增肌与减脂？</a>。<a id="more"></a>继续主题，说到运动减脂，要考虑两个方面：第一，<strong>运动形式</strong>，像武术、游泳就不是很好的减脂运动。武术扎马步、冲拳踢腿等运动大部分不属于有氧运动的范畴，而<strong>脂肪只有在有氧运动中才可能被分解利用</strong>。游泳池水温一般低于体温，脂肪在人体的一个重要功能就是保温，为避免人体热量散失过多，游泳时，脂肪会被保护起来而难以被分解利用。看到这里，是不是会更加佩服我们神奇的人体系统，嘿嘿。游泳运动员一般身体没有太瘦的，估计也有这方面的原因吧。第二，<strong>运动量</strong>，一般来讲，四十分钟以下的有氧运动主要是以糖原的氧化功能为主，只有在体内的糖元近乎耗尽后，脂肪才会被大量利用。因此，有氧运动，如跑步，要想起到减脂的效果，最好能<strong>坚持40分钟以上</strong>。</p>
<p>总算提到跑步了，这才是今天的主题啊。说起跑步，真是项低成本高收益的运动，并且全世界都高度一致地保持着对跑步的认可和热爱。有小道消息，「成功人士」中，90%以上的人都有坚持跑步的锻炼习惯，小道消息，乐呵乐呵就行了，别跟我较真哈。听现同事说，之前有个女实习生，曾经连着两周参加了两次马拉松，并且成绩都还不错，生猛地有点惊悚了。好了，不给跑步写软文了，好东西不用宣传，再说，丫都没给好处费。</p>
<p>既然跑步那么好，为什么坚持跑步的人却并没有想像中的多呢？这个问题，我之前也思考过。我认为主要存在这三个方面的问题：</p>
<ol>
<li><strong>形成习惯太难</strong>：正如21天法则，当一件事情坚持做21天后，就会养成一种习惯。养成习惯之后自然好办，可关键是这21天的坚持是难点。</li>
<li><strong>约束力弱</strong>：跑步多数情况下是一项一个人参与的运动，环境约束力较弱，某一段时间工作一忙或者懒可能就放下了。</li>
<li><strong>时间不允许</strong>：跑步对于刚开始的人来说，相对有点枯燥，再加上现代人在如此快的生活节奏下，连睡眠时间都舍不得给，让出1小时给跑步用，多少会有点不舍啊。</li>
</ol>
<p>基于这三方面的问题，我也想过对策。比如</p>
<ol>
<li>通过正点闹钟等APP设置提醒，减少在早期习惯没养成阶段因遗忘而无法促成的坚持。</li>
<li>借助于跑步记步器等工具，根据个人情况，在完成每个月设定的跑步累计里程后给自己个嘉奖。借此，一来可以提升自信心，二来可以获得满足感。</li>
<li>在跑步的过程中，并行进行其他活动，比如思考问题，听音乐等。这样既可以让一个人的运动变得不再那么单调枯燥，又可以高效地利用时间。</li>
</ol>
<p>针对第三点，<em>跑步过程中并行进行其他活动</em>，还存在一个问题。到底什么活动比较合适？很明显是不需要双手双眼参与的活动，这样以来，基本上只有「听」和「思考」了。 很多人喜欢在健身房跑步机上边跑步边听音乐，这其实就是个很好的并行活动。关于跑步中听音乐，知乎上也有个不错的帖子，大家可以参考<a href="http://www.zhihu.com/question/21640344">当你跑步时你在听什么？</a>。接下来我想主要谈论一下在运动中进行思考相关的内容。</p>
<p>从哲学上讲，分析问题可以从主体和客体及主客体的关系出发。对于运动中思考来说，主体很显然就是我们每个个体，客体也就是我们跑步的场所，考虑到主客体的关系也就相当于考虑我们在特定场所跑步时需要注意的情况了。我们常说，环境很重要，而跑步的环境，我能想象到的主要有健身房跑步机上跑步、街道上跑步、公园或小区里跑步这几种了。从安全地角度来讲，健身房跑步机上跑步，不能太分散注意力。所以，个人认为不太适合做太多思考性的工作，也许听音乐是最好的并行活动了。街道上，由于伴随着车来人往，也不适合进行太分神的活动。我觉得，这种情况下，跑步的间隙，扫视下周围的形形色色的过往人群和纷繁林立的商铺，也是一种享受，说不定还会有新的发现。在公园里或者小区里跑步，如果天气不是极其恶劣的话，相对来说还是最好的选择了。由于人车都相对少，会非常安全。当然了，跑步中也要留神散步中的狗狗们啊，尤其是一些大型犬，别不小心惊吓到它们进而惊吓到自己哦。总的来说，在小区公园这种理想的环境里其实最适合进行一些思考性的活动了。个人认为，可以根据当天身体状况和心情愉悦度及工作情况进行不同地思考。比如，在心情轻松，当天工作也不繁忙的情况下可以进行些相对深层次地思考，比如思考近来阅读的书中的一个观点，或者自己一直以来的一个未完善的想法等。如若近期工作压力较大，则可以借机梳理下近期工作中的问题，理清工作思路，或者是简单地回顾下当天发生的生活中和工作上的事，脑子里进行自省和总结。当然，如果实在不想去想工作中或生活里的琐事，也可以不坊观察一下小区里的布局，比如景观规划或者小区停车位上都停得是什么车，推测小区整体居住群体和消费习惯，统计一下小区空置率，推算一下附近人口密度（貌似好。。^_^），等等。总之，跑步时，大脑完全可以同时做点其他的事情。</p>
<p>其实，大脑真得是个神奇的创意坊，而思考又是件非常有趣的事情。如果说阅读会给我们带来广阔精彩的天地，那思考就允许我们在广阔精彩的天地里天马行空，无羁无束 。而跑步时伴随着进行着天马行空的思考，说不定会迸发出更加精彩的灵感。其实这篇文章，就是在今天跑步后完成的，而这篇文章里的些许思考也是在今天晚上跑步时并行进行的。考虑到今天晚上跑步时是在思考「跑步的同时可以思考些什么」相关的问题，所以，这篇文章就自然成了关与「跑步时思考」的思考的文章了。有点拗口，且称之为「跑步元思考」吧。</p>
]]></content>
      <categories>
        <category>生活</category>
        <category>健身</category>
      </categories>
      <tags>
        <tag>运动</tag>
      </tags>
  </entry>
  <entry>
    <title>重生</title>
    <url>/2017/04/19/%E9%87%8D%E7%94%9F/</url>
    <content><![CDATA[<p>​再过两天我就该过31周岁生日了，韶华易逝，红颜易老，是时候对过往经历进行复盘了。<a id="more"></a><br>大学<br>复盘过往的成长经历，还要先从我高中毕业时说起，毕竟那是我第一次独立生活，独自面对社会，独自做出选择，我成年了。我当年高考六百多分，全县前二十名，填报志愿时狂妄地不勾选「服从调剂」的选项，最后落榜去了一所二流的本科院校，随意地选了当时最热门但后来发现自己并不喜欢的专业——机械工程及自动化。<br>大一时，通过学校三轮筛选，最后被选上代表学校参加天津市数学竞赛，高数免考直接给最高绩点5。<br>大一结束时，全校C语言考试，我以满分的成绩考了全校第一。后来，我就天天抱着各种英文编程书，对着电脑死磕代码。单片机、C、C++、Java、Javascript、Linux、Shell，见啥学啥。<br>大二时，疯狂地迷恋李小龙，大二结束时，我开始先学习跆拳道，第一次跆拳道考级，我就考了WTF韩国国际院颁发的最佳品势奖。之后，大三参加学校大学生社团展示月的闭幕式并做跆拳道压轴表演，大四在北京一个教堂的三周年庆典上做跆拳道压轴表演。<br>大三时，被微机原理与接口技术的专业课老师叫去，做了学校工程训练中心的信息管理系统。<br>大三时，因液压老师的一句「同学们，大三了，大家该收收心了」而拒绝了6Green网站抛出的橄榄枝。<br>大四时，被朋友推荐，在一个日韩人居住较多的高档小区替一名日本人经营了一家小区便利店，二八分成，日本人二，我八。<br>大四毕业时，毕设做了自行车自动存管装置，涉及了机械、自动化和计算机这三个学科。后来，该课题被拿去成功申请了专利。<br>大学四年，一直拿一等奖学金。<br>总得来说，大学四年本专业的学习，弄懂了装配图和零件图的区别，会熟练使用AutoCAD，了解了车、钳、刨、铣都是干啥的，每门课考试成绩都数一数二，但要说真正明白了啥，估计就是明白了自己实在是不喜欢机械吧。至于计算机技术，我基本上被动承包了很多同学的电脑技术支持和网络技术支持及网站技术支持工作，说白了，就是免费给大家修电脑、摆置宽带网络和做网站。后来，学校里流传着一句话：「某某」是机械学院最懂自动化的，自动化学院最懂计算机的，计算机学院最懂机械的。接着说跆拳道，总共练了快三年，到该考黑带时，有事给耽搁了，然后就放下了。还有，这几年被一个「朋友」坑过钱，为一个朋友出头打过架，替宿舍哥们儿打抱不平手上被缝了13针线，还被人关过小黑屋恐吓过。<br>大学生活，就这么切切实实地过去了，很多大学同学都说我是长期介于牛A和牛C之间的人。<br>工作<br>大学毕业后，我签了一家全球500强的风力发电外企，全天津只招15人，招当时很时髦的技术管理培训生（Technology management trainee）。三轮面试后，我通过，很开心，每天早晨都是笑醒的，似乎已经是人生赢家了。再后来，赶上09年金融危机，厌恶了没有核心竞争力的管理岗位后，我毅然辞职去了北京，开始了逐梦之旅，做起了程序员。期间在中科院软件研究所下属的一家公司里做过Linux桌面应用开发、Linux内核驱动开发、上网本开发和高铁MVB通信协议栈研发。离开时，发现我所在的研发团队，除了我之外，剩下的都是北航、北大、清华的。再后来，拿到了华为北研所的Offer，去了华为北研所，跟我一起参加华为大队培训的那帮小伙伴里，我是第一个参加预备PL培训的，后来带队做了IPv6用户上线连接管理的设计和开发和其他的BRAS产品增值业务开发，直到11年底离开华为。<br>总之，在北京工作的那段时间，我没日没夜的读书、学习，市面上经典的C语言、计算机网络、操作系统及数据结构和算法的好书很多都读过、练过。<br>中国有句古话，读万卷书，不如行万里路，行万里路，不如名师指路。所以，从华为辞职后，我自驾去了一趟西藏，川藏进、青藏出，见到了各地的人的各种不同的生活方式，才发现原来人还可以那样与众不同的过一生。之后，在家看了三个月的杂书，易经、失控、GEB、三体……。<br>从大学开始，到离开华为后自驾去西藏后，总共过了七年多的时间，这是我成年后度过的「第一辈子」。很多朋友都觉得我这「第一辈子」很出彩，是个牛人。<br>婚姻<br>离开华为后，在家呆的那段日子里，我遇到了我现在的老婆，两人老家一个地方，在那个年龄，在那种环境，一旦开始了以结婚为目的的恋爱，结婚的进程就真得进行得飞快了。后来，迫于结婚筹备和生活的压力，我决定再次回到北京——工作、赚钱。<br>去北京的机会，来自于猎头为惠普中国研究院（HP Labs China）招一名高级软件工程师，负责当时还属IEEE草案期的Hotspot2.0技术在AP上的协议研发。当时，该职位已经招了快一年，一直没有物色到合适的人选，我觉得很有挑战，也很感兴趣，就应聘了，顺利通过了，很开心。不得不说，惠普中国研究院的Style真得很迷人，弹性工作制，上下班不打卡，有专门的Pantry摆放着各种茶、饮品、点心供自由取用。工作上除了每双周例会时同惠普总部Palo Alto的Fellow汇报和交流外，其他情况都可自行安排自己的时间，整个Lab充满了浓厚的分享文化和共享精神。<br>那段时间，过得很充实，感觉身边尽是牛人，每个人的履历都是分分钟闪瞎眼睛的那种。到处都是本科清华、北大、中科大，研究生或博士读的国外常春藤大学。每天大家讨论的话题，从量子物理到当时一枚还不到500人民币的比特币。工作场合见不到中文，全天候的英文环境。服务器在硅谷，所以，也从来不用考虑科学上网的问题。那段时间我开始在Coursera上学习各种国外的公开课，从计算机编程领域到心理学领域再到金融领域。阅读英文技术文档和论文也从刚开始盯着发呆到后来能快速扫视即可获取想要的信息。上下班地铁通勤的时间里，也从没停止过用kindle阅读。<br>一切似乎都很不错，但是，当时却一直有个致命的问题，萦绕在我的脑海里，挥之不去：我来北京工作赚钱，当初是为结婚做准备的，那我的下一步到底该如何走？<br>当时的女朋友（现在的老婆）在我们老家，央企正式员工，有着很多人羡慕的稳定且待遇不错的工作，还有很充裕的自由时间支配，让她放弃一切跟我结婚并留在北京，于情于理，都不现实。<br>后来，我果断做了个决定：先结婚！<br>很多人都觉得我很牛，在大部分人都还迷茫的时候，做到了事业、婚姻两不误。<br>创业<br>结了婚，我就开始留意可以回家乡的机会，也在考虑着回家创业。有一天，我接到一个电话，一个在北京仅见过两次面的朋友，邀请我回到老家以技术入股的方式，一起创业做IT培训。IT培训，那时我也有在考虑的，移动互联网当时已经呈现出即将火爆的态势了，不管移动互联网项目成败与否，提供人才培训服务，总不会错的。最重要的是，我可以提前回家启动创业计划了，我很兴奋。所以，我同意了，回到了老家，开始了第一次创业。<br>种种原因，那段创业经历，我今天并不想着墨太多。总得来说，第一年，我边讲课、边出课程体系、边带老师，是公司的教学总监。第二年，我负责教学团队和就业团队，是产品中心负责人。第三年，下半年，我出任公司CEO。三年的创业经历，我从中学到了很多做人、做事和管理的经验，感谢这段经历。<br>现在我已经离开了当初第一次创业的那家公司，并刚刚成立了自己的新公司，打造了自己心心念念的「速度与激情」团队，开始以自己喜欢的方式和节奏startup。<br>从再次北上工作到结婚到创业再到现在二次创业，我又过了快「一辈子」，这是我成年后度过的「第二辈子」。 很多同学和朋友都觉得我这「第二辈子」很勇敢、很出彩，是个牛人 。<br>重生<br>以上所述，都是我的真人真事，可是，我内心一直不安，一直在怀疑：难道我真得是个牛人吗？<br>答案是：不是。不光如此，用我现今的认知来看，我这过去的「两辈子」甚至是失败的！<br>想当年王阳明，用了几十年，才在36岁时龙场悟道。于是有了「我心自有光明月，千古团圆永无缺」的心学。他是从小立志做圣贤的人，是中国两个半完人中的一个。 我从没想过做圣人，可我用了近「两辈子」，才发现我过去的「两辈子」根本没有活明白！<br>过去的我，根本不知道自己想要啥，三观不稳，还一直苛责自己。<br>过去的我，被各种外部因素困扰着，左右着，看似每次都是自己的选择，实则根本没有选择。<br>过去的我，哪怕只是想学习点理财知识，我就会去学习整个经济学，只因经济学里要用到些许概率论，又会去学习整个概率论和线性代数。<br>过去的我，总喜欢跟周围的人比，总想超越周围的人。就连一群人K歌，我也要成为K歌之王。<br>过去的我， 上厕所都要拿本书，开车都要听广播，就连陪老婆孩子时都会见缝插针地看订阅文章，日程安排得满满的，神经绷得紧紧的。<br>过去的我，……<br>这样看来，过去的我，就是失败的！<br>而直到现在，我才清楚地明白，自己这接下来的这「第三辈子」该如何度过。<br>我重新定了「成功」：清楚自己想要啥，并始终悦纳自己。做个对别人、对社会有用的人！<br>一片叶子，看似自由，质量极小，甚至连地心引力都能摆脱，没有束缚。但那不是自由，它只能随风飘荡，随波逐流，根本无法左右自己的方向和未来！<br>我重新定义了「自由」：真正的自由，源于高度的自律！自由，是有选择的权利！<br>我深刻意识到，「用功」并不等于「精进」，在通往「精进」的道路上，到处都是坑。<br>有个坑叫「躁进」：躁进的人，以理想主义的激情，走着现实主义的道路。胡子眉毛啥都抓。<br>有个坑叫「狂进」：狂进的人，兴趣广泛却画地为牢。在自己的舒适区里享受着优越感。<br>有个坑叫「乱进」：乱进的人，是一台不下电的机器，是时间的奴隶。<br>我深入地理解了，「投机」并不是「投资」 ，「投机」搏的是短期收益，「投资」求的是复利效应。<br>我开始意识到「长期」 的重要性。每天进步一点点，1.01的365次方≈38，1.01的3650次方≈无穷大。 每天退步一点点，0.99的365次方≈0.026，0.99的3650次方≈无穷小。<br>我开始笃信：量变必然引起质变！<br>我开始抛弃掉大学中学习的马克思主义政治经济学中关于商品价值的定义：即价值就是凝结在商品中的无差别的人类劳动。我现在认同新古典主义经济学派对商品价值的定义：即商品的价值取决于对于该商品的需求，跟成本无关。以此作为推论，我开始强烈地意识到：一个人的价值，取决于他是否被人需要，是否被这个社会需要。 所以，一个真正有价值的人，一定是对别人有用的人，对这个社会有用的人，这才是成功人士的概念。所以，从小我们被教育的：「你长大后要做个对这个社会有用的人」 原来是这么的正确！同理，一个成功的企业也应该是对这个世界有用的。<br>我开始……<br>现在的我，正在经历一种重生的蜕变。「种一棵树最好的时间是十年前，其次是现在」，很庆幸赶在自己「第三辈子」开始之际，已经进行了一次认知的革新，准确地说，我称之为「认知操作系统（Cognition Operating System）」的升级。伴随着这次升级，我愈发地意识到，现在社会，人与人之间，企业与企业之间，一切的差异，一切的竞争，都源于认知的差异，认知的竞争。</p>
]]></content>
      <categories>
        <category>认知</category>
      </categories>
      <tags>
        <tag>认知</tag>
        <tag>复盘</tag>
      </tags>
  </entry>
  <entry>
    <title>思维巨人与脑残</title>
    <url>/2024/10/29/%E6%80%9D%E7%BB%B4%E5%B7%A8%E4%BA%BA%E4%B8%8E%E8%84%91%E6%AE%8B/</url>
    <content><![CDATA[<p>AI 正在重塑人类的思维版图。最近，YC创始人、《黑客与画家》作者保罗·格雷厄姆发表了一篇引人深思的博客<a href="https://paulgraham.com/writes.html">“Writes and Write-Nots”</a>。</p>
<p>作者开篇就表达了观点：</p>
<blockquote>
<p>我通常不愿意对技术做出预测，但对这一观点，非常有信心：几十年后，会写作的人将不会很多。</p>
</blockquote>
<p>文末，作者还升级了观点：</p>
<blockquote>
<p>将未来的世界分为写作和不写作并没有听起来那么危险，事实上，未来将是一个思考和不思考的世界。</p>
</blockquote>
<a id="more"></a>

<p>原文并不长，但作者思路清晰，有理有据，并非哗众取宠。那为什么保罗·格雷厄姆会这么说，甚至专门写一篇文章来阐述？这也正是我今天开始重拾写作，并开始写下本文的原因！</p>
<p>我们先做个小实验：如果你已经参加工作超过十年，请试着用笔写下『喷嚏』二字。今天早上我在看到这 <a href="https://globalchinapulse.net/character-amnesia-in-china/">Character Amnesia in China</a> 这篇文章时，第一时间试了一下，我确实写不出来。事实上，我相信很多人应该跟我一样，好多常见汉字都不会写了吧？</p>
<p>18 世纪，人类发明了蒸汽机，掀起了第一次工业革命，人类从大规模的繁重的体力劳动中解放出来。短短 200 年里，人类的平均体能也以肉眼可见的方式衰退。英国一项追踪研究发现，仅 1985 年到2015 年间，10-12岁儿童的上肢力量就平均下降了26%。</p>
<p>但与此同时，体能的极限却在不断被打破。1896年第一届现代奥运会的男子100米金牌成绩是12秒，如今人类纪录已经突破到9.58秒。1920年奥运会男子举重纪录是156公斤，现在已达到488公斤。专业运动员借助现代科技和训练方法，把人类体能推向了新的高度。</p>
<p>随着当下席卷全球的以大语言模型为代表的 AIGC 时代的到来，AI 开始在写作、设计、编程、科研、决策分析等各领域逐步接管人类的脑力劳动。类比思考一下，我认为，未来，人类的思维能力也会出现两个极端的分化图景。大部分人会弱化成为不具备思考能力的『脑残』，而少数人会借助 AI 无限拓展认知边界，最终进化成前所未有的『思维巨人』。</p>
<p>最后，再次回到保罗·格雷厄姆的这篇文章上。作者文中反复提到一个观点：写作就是思考。莱斯利·兰波特 （Leslie Lamport）更好地表达了这一点：</p>
<blockquote>
<p>If you’re thinking without writing, you only think you’re thinking.</p>
</blockquote>
<blockquote>
<p>『如果你只思考而不写作，你只是认为你在思考。』</p>
</blockquote>
<p>我是一个喜欢拥抱新技术的人，更不是一个会因为新技术而焦虑的人，但这次生成式 AI 的技术浪潮，足以值得我们每一个人重视起来。</p>
<p>工业革命后的这一两百年，才有了『健身』这个概念，随之诞生了『健身房』、『健身教练』和『健身器械』。未来，人类可能也需要『健脑』了。我们可能会看到『健脑房』，『思维教练』成为新兴职业，『认知训练』变成日常刚需。毕竟，大多数人并不想成为『脑残』吧？而正如保罗·格雷厄姆说的，写作就是思考。写作也无疑是一个不错的『健脑』运动。</p>
<p>是成为『思维巨人』还是成为『脑残』，选择权在于自己。</p>
<p>就像现在，有人在健身房挥汗如雨，有人在沙发上刷短剧。有人规律去『健脑』，有人习惯性把思考外包。</p>
<p>今天，我做出了自己的选择，你选好了吗？</p>
]]></content>
      <categories>
        <category>认知</category>
      </categories>
      <tags>
        <tag>AI</tag>
        <tag>写作</tag>
      </tags>
  </entry>
  <entry>
    <title>写作 —— 健脑俱乐部中的杠铃</title>
    <url>/2024/11/10/%E5%86%99%E4%BD%9C-%E2%80%94%E2%80%94-%E5%81%A5%E8%84%91%E4%BF%B1%E4%B9%90%E9%83%A8%E4%B8%AD%E7%9A%84%E6%9D%A0%E9%93%83/</url>
    <content><![CDATA[<h1 id="写作-——-健脑俱乐部中的杠铃"><a href="#写作-——-健脑俱乐部中的杠铃" class="headerlink" title="写作 —— 健脑俱乐部中的杠铃"></a>写作 —— 健脑俱乐部中的杠铃</h1><p>在AI席卷而来的时代浪潮中，我们每个人都面临着一个关键选择：要么沦为AI的附属，任由思维退化；要么主动强化认知能力，成为驾驭AI的思维巨人。面对AI的加速发展，思维能力不再是简单的技能，而是我们独立存在的核心能力。</p>
<p>就像健身俱乐部里的杠铃声彰显着人类对体能极限的追求，写作，正是『健脑俱乐部』里的杠铃，帮助我们在思维的每次『负重深蹲』中不断突破认知的极限。</p>
<a id="more"></a>


<h3 id="为什么写作是思考训练中最高效的工具？"><a href="#为什么写作是思考训练中最高效的工具？" class="headerlink" title="为什么写作是思考训练中最高效的工具？"></a>为什么写作是思考训练中最高效的工具？</h3><h4 id="思考的本质"><a href="#思考的本质" class="headerlink" title="思考的本质"></a>思考的本质</h4><p>思考是大脑对信息进行筛选、提炼和逻辑加工的迭代过程。通过形成概念、构建关联、推理判断，产生新的认知。</p>
<p>思考就像烹饪一道美食：精选食材（信息加工）、准备食材（概念形成）、搭配组合（概念关联）、掌握火候（逻辑推理），最终呈现出一道色香味俱全的佳肴（认知生成）。</p>
<p>正如一位厨师会不断调整配方，思考也是反复推敲、逐步打磨的过程。</p>
<h4 id="写作的特点"><a href="#写作的特点" class="headerlink" title="写作的特点"></a>写作的特点</h4><p>写作是将思维内容通过文字符号进行结构化表达和优化的迭代过程。通过筛选内容、构建框架、精准表达和情感注入，形成清晰且具感染力的文本作品。</p>
<p>就像杠铃训练有深蹲、卧推、硬拉等基本动作，写作也有选材、结构、表达等核心环节。而且，写作对思维的训练更为全面。</p>
<p>如果说力量训练是对肌肉的全面刺激，那写作就是对思维的全方位训练。每一篇文章的写作都像是完成一次思维的组合动作。从信息筛选到逻辑构建，从概念形成到表达优化，全面锻炼着我们的思考能力。</p>
<h4 id="写作与思考的关系"><a href="#写作与思考的关系" class="headerlink" title="写作与思考的关系"></a>写作与思考的关系</h4><h5 id="写作是思考的组织工具"><a href="#写作是思考的组织工具" class="headerlink" title="写作是思考的组织工具"></a>写作是思考的组织工具</h5><p>写作就像规划力量训练的杠铃配重，把分散的概念和思维碎片通过 <code>内容选取</code> 和 <code>逻辑框架</code> 组织成形，让抽象的想法变得条理清晰。比如这篇文章，最初我只是有一些关于写作和思考的零散想法，通过写作的整理，才逐步形成了现在这个清晰的逻辑框架。</p>
<h5 id="写作是思考过程的照妖镜"><a href="#写作是思考过程的照妖镜" class="headerlink" title="写作是思考过程的照妖镜"></a>写作是思考过程的照妖镜</h5><p>如果说思考是在头脑中进行的『虚拟训练』，那写作就是真正的『实战演练』。</p>
<p>我们在脑海中以为合理的逻辑，往往在写作时暴露出漏洞；那些混乱的想法，写下来才发现是情绪化的判断。就像我们健身时，常常以为自己动作标准，但照镜子时才发现动作偏差。写作是让我们发现思维『错误动作』的照妖镜，也是校正思维的练习场。</p>
<h5 id="写作促进了思考的迭代与反馈"><a href="#写作促进了思考的迭代与反馈" class="headerlink" title="写作促进了思考的迭代与反馈"></a>写作促进了思考的迭代与反馈</h5><p>就像健身俱乐部中的力量训练，一般都先要用轻重量把动作做标准，再逐步增加重量。写作的过程也一样，通过反复的修改和打磨，不断提升思考的『负重』。每次修改都是一次反馈：有时发现逻辑不严谨，就要调整逻辑，补充佐证；有时觉得概念不清晰，就要重新提炼；有时会觉得结构不优雅，就要调整结构。这种反复的迭代，会让思维肌肉逐渐变大。</p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>如今，AI正在重塑我们的生活和工作方式。就像人们走进健身俱乐部是为了对抗身体的退化，我们也需要通过持续的写作训练来对抗思维的退化。</p>
<p>让我们一起步入健脑俱乐部，让写作成为我们的思维杠铃，开始这场认知锻炼之旅。</p>
]]></content>
      <categories>
        <category>认知</category>
      </categories>
      <tags>
        <tag>写作</tag>
      </tags>
  </entry>
</search>
